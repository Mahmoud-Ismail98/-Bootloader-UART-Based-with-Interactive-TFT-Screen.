
Bootloader_apdater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dfc  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002428  08002428  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002428  08002428  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002428  08002428  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002428  08002428  00012428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800242c  0800242c  0001242c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  20000010  08002440  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08002440  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001819  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000b08  00000000  00000000  00021895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000288  00000000  00000000  000223a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b7  00000000  00000000  00022628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001648  00000000  00000000  000227df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000024b0  00000000  00000000  00023e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000521a  00000000  00000000  000262d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000788  00000000  00000000  0002b4f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0002bc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000010 	.word	0x20000010
 800014c:	00000000 	.word	0x00000000
 8000150:	08001614 	.word	0x08001614

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000014 	.word	0x20000014
 800016c:	08001614 	.word	0x08001614

08000170 <HTFT_voidInitialize>:
u8 _colstart;   ///< Some displays need this changed to offset
u8 _rowstart;       ///< Some displays need this changed to offset
u8 _xstart;
u8 _ystart;
void HTFT_voidInitialize   (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	/* Reset Pulse */
	MGPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 8000174:	2201      	movs	r2, #1
 8000176:	2102      	movs	r1, #2
 8000178:	2000      	movs	r0, #0
 800017a:	f000 fd2b 	bl	8000bd4 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(100);
 800017e:	2064      	movs	r0, #100	; 0x64
 8000180:	f000 fe70 	bl	8000e64 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,GPIO_LOW);
 8000184:	2200      	movs	r2, #0
 8000186:	2102      	movs	r1, #2
 8000188:	2000      	movs	r0, #0
 800018a:	f000 fd23 	bl	8000bd4 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(1);
 800018e:	2001      	movs	r0, #1
 8000190:	f000 fe68 	bl	8000e64 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 8000194:	2201      	movs	r2, #1
 8000196:	2102      	movs	r1, #2
 8000198:	2000      	movs	r0, #0
 800019a:	f000 fd1b 	bl	8000bd4 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(100);
 800019e:	2064      	movs	r0, #100	; 0x64
 80001a0:	f000 fe60 	bl	8000e64 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,GPIO_LOW);
 80001a4:	2200      	movs	r2, #0
 80001a6:	2102      	movs	r1, #2
 80001a8:	2000      	movs	r0, #0
 80001aa:	f000 fd13 	bl	8000bd4 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(100);
 80001ae:	2064      	movs	r0, #100	; 0x64
 80001b0:	f000 fe58 	bl	8000e64 <MSTK_voidSetBusyWait>
	MGPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
 80001b4:	2201      	movs	r2, #1
 80001b6:	2102      	movs	r1, #2
 80001b8:	2000      	movs	r0, #0
 80001ba:	f000 fd0b 	bl	8000bd4 <MGPIO_voidSetPinValue>
	MSTK_voidSetBusyWait(120000);
 80001be:	480a      	ldr	r0, [pc, #40]	; (80001e8 <HTFT_voidInitialize+0x78>)
 80001c0:	f000 fe50 	bl	8000e64 <MSTK_voidSetBusyWait>
	
	/* Sleep Out Command */
	voidWriteCommand(0x11);
 80001c4:	2011      	movs	r0, #17
 80001c6:	f000 f8b2 	bl	800032e <voidWriteCommand>
	
	/* Wait 150 ms */
	MSTK_voidSetBusyWait(150000);
 80001ca:	4808      	ldr	r0, [pc, #32]	; (80001ec <HTFT_voidInitialize+0x7c>)
 80001cc:	f000 fe4a 	bl	8000e64 <MSTK_voidSetBusyWait>
	
	/* Color Mode Command */
	voidWriteCommand(0x3A);
 80001d0:	203a      	movs	r0, #58	; 0x3a
 80001d2:	f000 f8ac 	bl	800032e <voidWriteCommand>
	voidWriteData (0x05); /*RGB565 is the parameter for COlor Mode Command */
 80001d6:	2005      	movs	r0, #5
 80001d8:	f000 f8be 	bl	8000358 <voidWriteData>
	
	/* Display On Command */
	voidWriteCommand(0x29);
 80001dc:	2029      	movs	r0, #41	; 0x29
 80001de:	f000 f8a6 	bl	800032e <voidWriteCommand>
}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	0001d4c0 	.word	0x0001d4c0
 80001ec:	000249f0 	.word	0x000249f0

080001f0 <HTFT_voidFillColor>:
	}


}
void HTFT_voidFillColor (u16 Copy_u16Color)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	4603      	mov	r3, r0
 80001f8:	80fb      	strh	r3, [r7, #6]
	u16 counter;
	u8 Data;

	/* Set X Address */
	// sending Start poin 00 (16bit) and Ending POint in X is 0/159 (16 bit ) sending byte by byte
	voidWriteCommand(0x2A);
 80001fa:	202a      	movs	r0, #42	; 0x2a
 80001fc:	f000 f897 	bl	800032e <voidWriteCommand>
	voidWriteData(0);
 8000200:	2000      	movs	r0, #0
 8000202:	f000 f8a9 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8a6 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f8a3 	bl	8000358 <voidWriteData>
	voidWriteData(127);
 8000212:	207f      	movs	r0, #127	; 0x7f
 8000214:	f000 f8a0 	bl	8000358 <voidWriteData>

	/* Set Y Address */
	voidWriteCommand(0x2B);
 8000218:	202b      	movs	r0, #43	; 0x2b
 800021a:	f000 f888 	bl	800032e <voidWriteCommand>
	voidWriteData(0);
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f89a 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 8000224:	2000      	movs	r0, #0
 8000226:	f000 f897 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f894 	bl	8000358 <voidWriteData>
	voidWriteData(159);
 8000230:	209f      	movs	r0, #159	; 0x9f
 8000232:	f000 f891 	bl	8000358 <voidWriteData>

	/* RAM Write all coming date show it on screen */
	voidWriteCommand(0x2C);
 8000236:	202c      	movs	r0, #44	; 0x2c
 8000238:	f000 f879 	bl	800032e <voidWriteCommand>

	for(counter = 0; counter< 20480;counter++)
 800023c:	2300      	movs	r3, #0
 800023e:	81fb      	strh	r3, [r7, #14]
 8000240:	e010      	b.n	8000264 <HTFT_voidFillColor+0x74>
	{
		Data = Copy_u16Color >> 8;
 8000242:	88fb      	ldrh	r3, [r7, #6]
 8000244:	0a1b      	lsrs	r3, r3, #8
 8000246:	b29b      	uxth	r3, r3
 8000248:	737b      	strb	r3, [r7, #13]

		/* Write the high byte */
		voidWriteData(Data);
 800024a:	7b7b      	ldrb	r3, [r7, #13]
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f883 	bl	8000358 <voidWriteData>
		/* Write the low byte */
		Data = Copy_u16Color & 0x00ff;
 8000252:	88fb      	ldrh	r3, [r7, #6]
 8000254:	737b      	strb	r3, [r7, #13]
		voidWriteData(Data);
 8000256:	7b7b      	ldrb	r3, [r7, #13]
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f87d 	bl	8000358 <voidWriteData>
	for(counter = 0; counter< 20480;counter++)
 800025e:	89fb      	ldrh	r3, [r7, #14]
 8000260:	3301      	adds	r3, #1
 8000262:	81fb      	strh	r3, [r7, #14]
 8000264:	89fb      	ldrh	r3, [r7, #14]
 8000266:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800026a:	d3ea      	bcc.n	8000242 <HTFT_voidFillColor+0x52>
	}
}
 800026c:	bf00      	nop
 800026e:	bf00      	nop
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}

08000276 <HTFT_voidDrawRect>:
void HTFT_voidDrawRect(u8 x1 ,u8 x2 ,u8 y1 ,u8 y2 ,u16 Copy_u16Color)
{
 8000276:	b590      	push	{r4, r7, lr}
 8000278:	b085      	sub	sp, #20
 800027a:	af00      	add	r7, sp, #0
 800027c:	4604      	mov	r4, r0
 800027e:	4608      	mov	r0, r1
 8000280:	4611      	mov	r1, r2
 8000282:	461a      	mov	r2, r3
 8000284:	4623      	mov	r3, r4
 8000286:	71fb      	strb	r3, [r7, #7]
 8000288:	4603      	mov	r3, r0
 800028a:	71bb      	strb	r3, [r7, #6]
 800028c:	460b      	mov	r3, r1
 800028e:	717b      	strb	r3, [r7, #5]
 8000290:	4613      	mov	r3, r2
 8000292:	713b      	strb	r3, [r7, #4]
	u16 size =(x2-x1) * (y2-y1);
 8000294:	79ba      	ldrb	r2, [r7, #6]
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	1ad3      	subs	r3, r2, r3
 800029a:	b29b      	uxth	r3, r3
 800029c:	7939      	ldrb	r1, [r7, #4]
 800029e:	797a      	ldrb	r2, [r7, #5]
 80002a0:	1a8a      	subs	r2, r1, r2
 80002a2:	b292      	uxth	r2, r2
 80002a4:	fb02 f303 	mul.w	r3, r2, r3
 80002a8:	81bb      	strh	r3, [r7, #12]
	u16 counter;
	u8 Data;

	/* Set X Address */
	// sending Start poin 00 (16bit) and Ending POint in X is 0/159 (16 bit ) sending byte by byte
	voidWriteCommand(0x2A);
 80002aa:	202a      	movs	r0, #42	; 0x2a
 80002ac:	f000 f83f 	bl	800032e <voidWriteCommand>
	voidWriteData(0);
 80002b0:	2000      	movs	r0, #0
 80002b2:	f000 f851 	bl	8000358 <voidWriteData>
	voidWriteData(x1);
 80002b6:	79fb      	ldrb	r3, [r7, #7]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 f84d 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 80002be:	2000      	movs	r0, #0
 80002c0:	f000 f84a 	bl	8000358 <voidWriteData>
	voidWriteData(x2);
 80002c4:	79bb      	ldrb	r3, [r7, #6]
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f846 	bl	8000358 <voidWriteData>

	/* Set Y Address */
	voidWriteCommand(0x2B);
 80002cc:	202b      	movs	r0, #43	; 0x2b
 80002ce:	f000 f82e 	bl	800032e <voidWriteCommand>
	voidWriteData(0);
 80002d2:	2000      	movs	r0, #0
 80002d4:	f000 f840 	bl	8000358 <voidWriteData>
	voidWriteData(y1);
 80002d8:	797b      	ldrb	r3, [r7, #5]
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f83c 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f000 f839 	bl	8000358 <voidWriteData>
	voidWriteData(y2);
 80002e6:	793b      	ldrb	r3, [r7, #4]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f835 	bl	8000358 <voidWriteData>

	/* RAM Write all coming date show it on screen */
	voidWriteCommand(0x2C);
 80002ee:	202c      	movs	r0, #44	; 0x2c
 80002f0:	f000 f81d 	bl	800032e <voidWriteCommand>

	for(counter = 0; counter< size ;counter++)
 80002f4:	2300      	movs	r3, #0
 80002f6:	81fb      	strh	r3, [r7, #14]
 80002f8:	e010      	b.n	800031c <HTFT_voidDrawRect+0xa6>
	{
		Data = Copy_u16Color >> 8;
 80002fa:	8c3b      	ldrh	r3, [r7, #32]
 80002fc:	0a1b      	lsrs	r3, r3, #8
 80002fe:	b29b      	uxth	r3, r3
 8000300:	72fb      	strb	r3, [r7, #11]

		/* Write the high byte */
		voidWriteData(Data);
 8000302:	7afb      	ldrb	r3, [r7, #11]
 8000304:	4618      	mov	r0, r3
 8000306:	f000 f827 	bl	8000358 <voidWriteData>
		/* Write the low byte */
		Data = Copy_u16Color & 0x00ff;
 800030a:	8c3b      	ldrh	r3, [r7, #32]
 800030c:	72fb      	strb	r3, [r7, #11]
		voidWriteData(Data);
 800030e:	7afb      	ldrb	r3, [r7, #11]
 8000310:	4618      	mov	r0, r3
 8000312:	f000 f821 	bl	8000358 <voidWriteData>
	for(counter = 0; counter< size ;counter++)
 8000316:	89fb      	ldrh	r3, [r7, #14]
 8000318:	3301      	adds	r3, #1
 800031a:	81fb      	strh	r3, [r7, #14]
 800031c:	89fa      	ldrh	r2, [r7, #14]
 800031e:	89bb      	ldrh	r3, [r7, #12]
 8000320:	429a      	cmp	r2, r3
 8000322:	d3ea      	bcc.n	80002fa <HTFT_voidDrawRect+0x84>
	}
}
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bd90      	pop	{r4, r7, pc}

0800032e <voidWriteCommand>:
void voidWriteCommand(u8 Copy_u8Command)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	b084      	sub	sp, #16
 8000332:	af00      	add	r7, sp, #0
 8000334:	4603      	mov	r3, r0
 8000336:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp; /* this var has no effect as MISO pin not connected */
	
	/* Set A0 Pin to Low */
	MGPIO_voidSetPinValue(TFT_A0_PIN,GPIO_LOW);
 8000338:	2200      	movs	r2, #0
 800033a:	2101      	movs	r1, #1
 800033c:	2000      	movs	r0, #0
 800033e:	f000 fc49 	bl	8000bd4 <MGPIO_voidSetPinValue>
	
	/* Send Command over SPI */
	MSPI1_voidSendReceiveSynch(Copy_u8Command,&Local_u8Temp);
 8000342:	f107 020f 	add.w	r2, r7, #15
 8000346:	79fb      	ldrb	r3, [r7, #7]
 8000348:	4611      	mov	r1, r2
 800034a:	4618      	mov	r0, r3
 800034c:	f000 fd58 	bl	8000e00 <MSPI1_voidSendReceiveSynch>
	
}
 8000350:	bf00      	nop
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}

08000358 <voidWriteData>:

void voidWriteData   (u8 Copy_u8Data)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	u8 Local_u8Temp;
	
	/* Set A0 Pin to High */
	MGPIO_voidSetPinValue(TFT_A0_PIN,GPIO_HIGH);
 8000362:	2201      	movs	r2, #1
 8000364:	2101      	movs	r1, #1
 8000366:	2000      	movs	r0, #0
 8000368:	f000 fc34 	bl	8000bd4 <MGPIO_voidSetPinValue>
	
	/* Send data over SPI */
	MSPI1_voidSendReceiveSynch(Copy_u8Data,&Local_u8Temp);	
 800036c:	f107 020f 	add.w	r2, r7, #15
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	4611      	mov	r1, r2
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fd43 	bl	8000e00 <MSPI1_voidSendReceiveSynch>
}
 800037a:	bf00      	nop
 800037c:	3710      	adds	r7, #16
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}

08000382 <ST7735_SetAddressWindow>:
	MSTK_voidSetBusyWait(100);
	MGPIO_voidSetPinValue(TFT_RST_PIN,GPIO_HIGH);
}

void ST7735_SetAddressWindow(u8 x0, u8 y0, u8 x1, u8 y1)
{
 8000382:	b590      	push	{r4, r7, lr}
 8000384:	b083      	sub	sp, #12
 8000386:	af00      	add	r7, sp, #0
 8000388:	4604      	mov	r4, r0
 800038a:	4608      	mov	r0, r1
 800038c:	4611      	mov	r1, r2
 800038e:	461a      	mov	r2, r3
 8000390:	4623      	mov	r3, r4
 8000392:	71fb      	strb	r3, [r7, #7]
 8000394:	4603      	mov	r3, r0
 8000396:	71bb      	strb	r3, [r7, #6]
 8000398:	460b      	mov	r3, r1
 800039a:	717b      	strb	r3, [r7, #5]
 800039c:	4613      	mov	r3, r2
 800039e:	713b      	strb	r3, [r7, #4]
	/* Set X Address */
	// sending Start poin 00 (16bit) and Ending POint in X is 0/159 (16 bit ) sending byte by byte
	voidWriteCommand(0x2A);
 80003a0:	202a      	movs	r0, #42	; 0x2a
 80003a2:	f7ff ffc4 	bl	800032e <voidWriteCommand>
	voidWriteData(0);
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffd6 	bl	8000358 <voidWriteData>
	voidWriteData(x0);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ffd2 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ffcf 	bl	8000358 <voidWriteData>
	voidWriteData(x1);
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ffcb 	bl	8000358 <voidWriteData>

	/* Set Y Address */
	voidWriteCommand(0x2B);
 80003c2:	202b      	movs	r0, #43	; 0x2b
 80003c4:	f7ff ffb3 	bl	800032e <voidWriteCommand>
	voidWriteData(0);
 80003c8:	2000      	movs	r0, #0
 80003ca:	f7ff ffc5 	bl	8000358 <voidWriteData>
	voidWriteData(y0);
 80003ce:	79bb      	ldrb	r3, [r7, #6]
 80003d0:	4618      	mov	r0, r3
 80003d2:	f7ff ffc1 	bl	8000358 <voidWriteData>
	voidWriteData(0);
 80003d6:	2000      	movs	r0, #0
 80003d8:	f7ff ffbe 	bl	8000358 <voidWriteData>
	voidWriteData(y1);
 80003dc:	793b      	ldrb	r3, [r7, #4]
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ffba 	bl	8000358 <voidWriteData>
	/* RAM Write all coming date show it on screen */
	voidWriteCommand(0x2C);
 80003e4:	202c      	movs	r0, #44	; 0x2c
 80003e6:	f7ff ffa2 	bl	800032e <voidWriteCommand>
}
 80003ea:	bf00      	nop
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd90      	pop	{r4, r7, pc}

080003f2 <ST7735_WriteChar>:
void ST7735_WriteChar(u16 x, u16 y, char ch, FontDef font, u16 color, u16 bgcolor) {
 80003f2:	b082      	sub	sp, #8
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	637b      	str	r3, [r7, #52]	; 0x34
 80003fc:	4603      	mov	r3, r0
 80003fe:	80fb      	strh	r3, [r7, #6]
 8000400:	460b      	mov	r3, r1
 8000402:	80bb      	strh	r3, [r7, #4]
 8000404:	4613      	mov	r3, r2
 8000406:	70fb      	strb	r3, [r7, #3]
    u32 i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000408:	88fb      	ldrh	r3, [r7, #6]
 800040a:	b2d8      	uxtb	r0, r3
 800040c:	88bb      	ldrh	r3, [r7, #4]
 800040e:	b2d9      	uxtb	r1, r3
 8000410:	88fb      	ldrh	r3, [r7, #6]
 8000412:	b2da      	uxtb	r2, r3
 8000414:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000418:	4413      	add	r3, r2
 800041a:	b2db      	uxtb	r3, r3
 800041c:	3b01      	subs	r3, #1
 800041e:	b2dc      	uxtb	r4, r3
 8000420:	88bb      	ldrh	r3, [r7, #4]
 8000422:	b2da      	uxtb	r2, r3
 8000424:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000428:	4413      	add	r3, r2
 800042a:	b2db      	uxtb	r3, r3
 800042c:	3b01      	subs	r3, #1
 800042e:	b2db      	uxtb	r3, r3
 8000430:	4622      	mov	r2, r4
 8000432:	f7ff ffa6 	bl	8000382 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000436:	2300      	movs	r3, #0
 8000438:	61fb      	str	r3, [r7, #28]
 800043a:	e059      	b.n	80004f0 <ST7735_WriteChar+0xfe>
        b = font.data[(ch - 32) * font.height + i];
 800043c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800043e:	78fb      	ldrb	r3, [r7, #3]
 8000440:	3b20      	subs	r3, #32
 8000442:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000446:	fb01 f303 	mul.w	r3, r1, r3
 800044a:	4619      	mov	r1, r3
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	440b      	add	r3, r1
 8000450:	005b      	lsls	r3, r3, #1
 8000452:	4413      	add	r3, r2
 8000454:	881b      	ldrh	r3, [r3, #0]
 8000456:	613b      	str	r3, [r7, #16]
        for(j = 0; j < font.width; j++) {
 8000458:	2300      	movs	r3, #0
 800045a:	61bb      	str	r3, [r7, #24]
 800045c:	e03f      	b.n	80004de <ST7735_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	fa02 f303 	lsl.w	r3, r2, r3
 8000466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800046a:	2b00      	cmp	r3, #0
 800046c:	d019      	beq.n	80004a2 <ST7735_WriteChar+0xb0>
                u8 data[] = { color >> 8, color & 0xFF };
 800046e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000470:	0a1b      	lsrs	r3, r3, #8
 8000472:	b29b      	uxth	r3, r3
 8000474:	b2db      	uxtb	r3, r3
 8000476:	733b      	strb	r3, [r7, #12]
 8000478:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800047a:	b2db      	uxtb	r3, r3
 800047c:	737b      	strb	r3, [r7, #13]
                for(u8 i=0;i<sizeof(data);i++)
 800047e:	2300      	movs	r3, #0
 8000480:	75fb      	strb	r3, [r7, #23]
 8000482:	e00a      	b.n	800049a <ST7735_WriteChar+0xa8>
                {
                	voidWriteData(data[i]);
 8000484:	7dfb      	ldrb	r3, [r7, #23]
 8000486:	3320      	adds	r3, #32
 8000488:	443b      	add	r3, r7
 800048a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff62 	bl	8000358 <voidWriteData>
                for(u8 i=0;i<sizeof(data);i++)
 8000494:	7dfb      	ldrb	r3, [r7, #23]
 8000496:	3301      	adds	r3, #1
 8000498:	75fb      	strb	r3, [r7, #23]
 800049a:	7dfb      	ldrb	r3, [r7, #23]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d9f1      	bls.n	8000484 <ST7735_WriteChar+0x92>
 80004a0:	e01a      	b.n	80004d8 <ST7735_WriteChar+0xe6>
                }
               // ST7735_WriteData(data, sizeof(data));
            } else {
                u8 data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80004a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004a6:	0a1b      	lsrs	r3, r3, #8
 80004a8:	b29b      	uxth	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	723b      	strb	r3, [r7, #8]
 80004ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	727b      	strb	r3, [r7, #9]
                for(u8 i=0;i<sizeof(data);i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	75bb      	strb	r3, [r7, #22]
 80004ba:	e00a      	b.n	80004d2 <ST7735_WriteChar+0xe0>
                {
                	voidWriteData(data[i]);
 80004bc:	7dbb      	ldrb	r3, [r7, #22]
 80004be:	3320      	adds	r3, #32
 80004c0:	443b      	add	r3, r7
 80004c2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff ff46 	bl	8000358 <voidWriteData>
                for(u8 i=0;i<sizeof(data);i++)
 80004cc:	7dbb      	ldrb	r3, [r7, #22]
 80004ce:	3301      	adds	r3, #1
 80004d0:	75bb      	strb	r3, [r7, #22]
 80004d2:	7dbb      	ldrb	r3, [r7, #22]
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d9f1      	bls.n	80004bc <ST7735_WriteChar+0xca>
        for(j = 0; j < font.width; j++) {
 80004d8:	69bb      	ldr	r3, [r7, #24]
 80004da:	3301      	adds	r3, #1
 80004dc:	61bb      	str	r3, [r7, #24]
 80004de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80004e2:	461a      	mov	r2, r3
 80004e4:	69bb      	ldr	r3, [r7, #24]
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d3b9      	bcc.n	800045e <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	3301      	adds	r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80004f4:	461a      	mov	r2, r3
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	4293      	cmp	r3, r2
 80004fa:	d39f      	bcc.n	800043c <ST7735_WriteChar+0x4a>
                }
                //ST7735_WriteData(data, sizeof(data));
            }
        }
    }
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	3724      	adds	r7, #36	; 0x24
 8000502:	46bd      	mov	sp, r7
 8000504:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000508:	b002      	add	sp, #8
 800050a:	4770      	bx	lr

0800050c <ST7735_WriteString>:

void ST7735_WriteString(u16 x, u16 y, const char* str, FontDef font, u16 color, u16 bgcolor) {
 800050c:	b082      	sub	sp, #8
 800050e:	b580      	push	{r7, lr}
 8000510:	b086      	sub	sp, #24
 8000512:	af04      	add	r7, sp, #16
 8000514:	603a      	str	r2, [r7, #0]
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	4603      	mov	r3, r0
 800051a:	80fb      	strh	r3, [r7, #6]
 800051c:	460b      	mov	r3, r1
 800051e:	80bb      	strh	r3, [r7, #4]
    while(*str) {
 8000520:	e031      	b.n	8000586 <ST7735_WriteString+0x7a>
        if(x + font.width >= _width) {
 8000522:	88fb      	ldrh	r3, [r7, #6]
 8000524:	7d3a      	ldrb	r2, [r7, #20]
 8000526:	4413      	add	r3, r2
 8000528:	4a1d      	ldr	r2, [pc, #116]	; (80005a0 <ST7735_WriteString+0x94>)
 800052a:	8812      	ldrh	r2, [r2, #0]
 800052c:	4293      	cmp	r3, r2
 800052e:	db15      	blt.n	800055c <ST7735_WriteString+0x50>
            x = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000534:	7d7b      	ldrb	r3, [r7, #21]
 8000536:	b29a      	uxth	r2, r3
 8000538:	88bb      	ldrh	r3, [r7, #4]
 800053a:	4413      	add	r3, r2
 800053c:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 800053e:	88bb      	ldrh	r3, [r7, #4]
 8000540:	7d7a      	ldrb	r2, [r7, #21]
 8000542:	4413      	add	r3, r2
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <ST7735_WriteString+0x98>)
 8000546:	8812      	ldrh	r2, [r2, #0]
 8000548:	4293      	cmp	r3, r2
 800054a:	da21      	bge.n	8000590 <ST7735_WriteString+0x84>
                break;
            }

            if(*str == ' ') {
 800054c:	683b      	ldr	r3, [r7, #0]
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b20      	cmp	r3, #32
 8000552:	d103      	bne.n	800055c <ST7735_WriteString+0x50>
                // skip spaces in the beginning of the new line
                str++;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	603b      	str	r3, [r7, #0]
                continue;
 800055a:	e014      	b.n	8000586 <ST7735_WriteString+0x7a>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	781a      	ldrb	r2, [r3, #0]
 8000560:	88b9      	ldrh	r1, [r7, #4]
 8000562:	88f8      	ldrh	r0, [r7, #6]
 8000564:	8c3b      	ldrh	r3, [r7, #32]
 8000566:	9302      	str	r3, [sp, #8]
 8000568:	8bbb      	ldrh	r3, [r7, #28]
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	69bb      	ldr	r3, [r7, #24]
 800056e:	9300      	str	r3, [sp, #0]
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	f7ff ff3e 	bl	80003f2 <ST7735_WriteChar>
        x += font.width;
 8000576:	7d3b      	ldrb	r3, [r7, #20]
 8000578:	b29a      	uxth	r2, r3
 800057a:	88fb      	ldrh	r3, [r7, #6]
 800057c:	4413      	add	r3, r2
 800057e:	80fb      	strh	r3, [r7, #6]
        str++;
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	3301      	adds	r3, #1
 8000584:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1c9      	bne.n	8000522 <ST7735_WriteString+0x16>
    }

}
 800058e:	e000      	b.n	8000592 <ST7735_WriteString+0x86>
                break;
 8000590:	bf00      	nop
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059c:	b002      	add	sp, #8
 800059e:	4770      	bx	lr
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000002 	.word	0x20000002

080005a8 <ST7735_SetRotation>:
    drawFastVLine(x, y, h, color);
    drawFastVLine(x+w-1, y, h, color);
}

void ST7735_SetRotation(u8 m)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]

  u8 madctl = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	f003 0303 	and.w	r3, r3, #3
 80005bc:	b2da      	uxtb	r2, r3
 80005be:	4b30      	ldr	r3, [pc, #192]	; (8000680 <ST7735_SetRotation+0xd8>)
 80005c0:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80005c2:	4b2f      	ldr	r3, [pc, #188]	; (8000680 <ST7735_SetRotation+0xd8>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b03      	cmp	r3, #3
 80005c8:	d84e      	bhi.n	8000668 <ST7735_SetRotation+0xc0>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <ST7735_SetRotation+0x28>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	080005e1 	.word	0x080005e1
 80005d4:	08000603 	.word	0x08000603
 80005d8:	08000625 	.word	0x08000625
 80005dc:	08000647 	.word	0x08000647
  {
  case 0:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80005e0:	23c0      	movs	r3, #192	; 0xc0
 80005e2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <ST7735_SetRotation+0xdc>)
 80005e6:	22a0      	movs	r2, #160	; 0xa0
 80005e8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80005ea:	4b27      	ldr	r3, [pc, #156]	; (8000688 <ST7735_SetRotation+0xe0>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80005f0:	4b26      	ldr	r3, [pc, #152]	; (800068c <ST7735_SetRotation+0xe4>)
 80005f2:	781a      	ldrb	r2, [r3, #0]
 80005f4:	4b26      	ldr	r3, [pc, #152]	; (8000690 <ST7735_SetRotation+0xe8>)
 80005f6:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <ST7735_SetRotation+0xec>)
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b26      	ldr	r3, [pc, #152]	; (8000698 <ST7735_SetRotation+0xf0>)
 80005fe:	701a      	strb	r2, [r3, #0]
    break;
 8000600:	e032      	b.n	8000668 <ST7735_SetRotation+0xc0>
  case 1:
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <ST7735_SetRotation+0xe0>)
 8000608:	22a0      	movs	r2, #160	; 0xa0
 800060a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <ST7735_SetRotation+0xdc>)
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <ST7735_SetRotation+0xe4>)
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	4b20      	ldr	r3, [pc, #128]	; (8000698 <ST7735_SetRotation+0xf0>)
 8000618:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <ST7735_SetRotation+0xec>)
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <ST7735_SetRotation+0xe8>)
 8000620:	701a      	strb	r2, [r3, #0]
    break;
 8000622:	e021      	b.n	8000668 <ST7735_SetRotation+0xc0>
  case 2:
      madctl = ST7735_MADCTL_RGB;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000628:	4b16      	ldr	r3, [pc, #88]	; (8000684 <ST7735_SetRotation+0xdc>)
 800062a:	22a0      	movs	r2, #160	; 0xa0
 800062c:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <ST7735_SetRotation+0xe0>)
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <ST7735_SetRotation+0xe4>)
 8000636:	781a      	ldrb	r2, [r3, #0]
 8000638:	4b15      	ldr	r3, [pc, #84]	; (8000690 <ST7735_SetRotation+0xe8>)
 800063a:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <ST7735_SetRotation+0xec>)
 800063e:	781a      	ldrb	r2, [r3, #0]
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <ST7735_SetRotation+0xf0>)
 8000642:	701a      	strb	r2, [r3, #0]
    break;
 8000644:	e010      	b.n	8000668 <ST7735_SetRotation+0xc0>
  case 3:
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000646:	2360      	movs	r3, #96	; 0x60
 8000648:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <ST7735_SetRotation+0xe0>)
 800064c:	22a0      	movs	r2, #160	; 0xa0
 800064e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <ST7735_SetRotation+0xdc>)
 8000652:	2280      	movs	r2, #128	; 0x80
 8000654:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000656:	4b0d      	ldr	r3, [pc, #52]	; (800068c <ST7735_SetRotation+0xe4>)
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <ST7735_SetRotation+0xf0>)
 800065c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <ST7735_SetRotation+0xec>)
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <ST7735_SetRotation+0xe8>)
 8000664:	701a      	strb	r2, [r3, #0]
    break;
 8000666:	bf00      	nop
  }
  voidWriteCommand(0x36);//ST7735_MADCTL
 8000668:	2036      	movs	r0, #54	; 0x36
 800066a:	f7ff fe60 	bl	800032e <voidWriteCommand>
//  ST7735_WriteData(&madctl,1);
	voidWriteData(madctl);
 800066e:	7bfb      	ldrb	r3, [r7, #15]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fe71 	bl	8000358 <voidWriteData>

}
 8000676:	bf00      	nop
 8000678:	3710      	adds	r7, #16
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000002c 	.word	0x2000002c
 8000684:	20000002 	.word	0x20000002
 8000688:	20000000 	.word	0x20000000
 800068c:	2000002d 	.word	0x2000002d
 8000690:	2000002f 	.word	0x2000002f
 8000694:	2000002e 	.word	0x2000002e
 8000698:	20000030 	.word	0x20000030

0800069c <FPEC_voidEraseAppArea>:
#include "../Inc/MCAL/FPEC/FPEC_private.h"
#include "../Inc/MCAL/FPEC/FPEC_config.h"

int app_apdated=0;
void FPEC_voidEraseAppArea(u8* Copy_recRecord)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]

	u8 page_offset;
	if((Copy_recRecord[3]=='3') &&(Copy_recRecord[4]=='C'))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	3303      	adds	r3, #3
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b33      	cmp	r3, #51	; 0x33
 80006ac:	d116      	bne.n	80006dc <FPEC_voidEraseAppArea+0x40>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3304      	adds	r3, #4
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b43      	cmp	r3, #67	; 0x43
 80006b6:	d111      	bne.n	80006dc <FPEC_voidEraseAppArea+0x40>
	{
		page_offset=15;
 80006b8:	230f      	movs	r3, #15
 80006ba:	737b      	strb	r3, [r7, #13]
		app_apdated=1;
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <FPEC_voidEraseAppArea+0x80>)
 80006be:	2201      	movs	r2, #1
 80006c0:	601a      	str	r2, [r3, #0]
		for (u8 i=page_offset;i<64;i++)
 80006c2:	7b7b      	ldrb	r3, [r7, #13]
 80006c4:	73fb      	strb	r3, [r7, #15]
 80006c6:	e006      	b.n	80006d6 <FPEC_voidEraseAppArea+0x3a>
		{
			FPEC_voidFlashPageErase(page_offset);
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f828 	bl	8000720 <FPEC_voidFlashPageErase>
		for (u8 i=page_offset;i<64;i++)
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	3301      	adds	r3, #1
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	2b3f      	cmp	r3, #63	; 0x3f
 80006da:	d9f5      	bls.n	80006c8 <FPEC_voidEraseAppArea+0x2c>
		}
	}
	if((Copy_recRecord[3]=='8')&& (Copy_recRecord[4]=='C'))
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3303      	adds	r3, #3
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b38      	cmp	r3, #56	; 0x38
 80006e4:	d116      	bne.n	8000714 <FPEC_voidEraseAppArea+0x78>
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3304      	adds	r3, #4
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b43      	cmp	r3, #67	; 0x43
 80006ee:	d111      	bne.n	8000714 <FPEC_voidEraseAppArea+0x78>
	{
		app_apdated=2;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <FPEC_voidEraseAppArea+0x80>)
 80006f2:	2202      	movs	r2, #2
 80006f4:	601a      	str	r2, [r3, #0]
		page_offset=35;
 80006f6:	2323      	movs	r3, #35	; 0x23
 80006f8:	737b      	strb	r3, [r7, #13]
		for (u8 i=page_offset;i<64;i++)
 80006fa:	7b7b      	ldrb	r3, [r7, #13]
 80006fc:	73bb      	strb	r3, [r7, #14]
 80006fe:	e006      	b.n	800070e <FPEC_voidEraseAppArea+0x72>
		{
			FPEC_voidFlashPageErase(page_offset);
 8000700:	7b7b      	ldrb	r3, [r7, #13]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f80c 	bl	8000720 <FPEC_voidFlashPageErase>
		for (u8 i=page_offset;i<64;i++)
 8000708:	7bbb      	ldrb	r3, [r7, #14]
 800070a:	3301      	adds	r3, #1
 800070c:	73bb      	strb	r3, [r7, #14]
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	2b3f      	cmp	r3, #63	; 0x3f
 8000712:	d9f5      	bls.n	8000700 <FPEC_voidEraseAppArea+0x64>
		}
	}

}
 8000714:	bf00      	nop
 8000716:	3710      	adds	r7, #16
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000034 	.word	0x20000034

08000720 <FPEC_voidFlashPageErase>:

void FPEC_voidFlashPageErase(u8 Copy_u8PageNumber)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 800072a:	bf00      	nop
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	2b01      	cmp	r3, #1
 8000736:	d0f9      	beq.n	800072c <FPEC_voidFlashPageErase+0xc>

	/* Check if FPEC is locked or not */
	if ( GET_BIT(FPEC->CR,7) == 1)
 8000738:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	09db      	lsrs	r3, r3, #7
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	2b01      	cmp	r3, #1
 8000744:	d105      	bne.n	8000752 <FPEC_voidFlashPageErase+0x32>
	{
		FPEC -> KEYR = 0x45670123;
 8000746:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000748:	4a18      	ldr	r2, [pc, #96]	; (80007ac <FPEC_voidFlashPageErase+0x8c>)
 800074a:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 800074c:	4b16      	ldr	r3, [pc, #88]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 800074e:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <FPEC_voidFlashPageErase+0x90>)
 8000750:	605a      	str	r2, [r3, #4]
	}
	
	/* Page Erase Operation */
	SET_BIT(FPEC->CR,1);
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000754:	691b      	ldr	r3, [r3, #16]
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6113      	str	r3, [r2, #16]

	/* Write Page address */
	FPEC->AR = (u32)(Copy_u8PageNumber * 1024) + 0x08000000 ;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	029b      	lsls	r3, r3, #10
 8000762:	4a11      	ldr	r2, [pc, #68]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000764:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000768:	6153      	str	r3, [r2, #20]

	/* Start operation */
	SET_BIT(FPEC->CR,6);
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 800076c:	691b      	ldr	r3, [r3, #16]
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000774:	6113      	str	r3, [r2, #16]

	/* Wait Busy Flag */
	while (GET_BIT(FPEC->SR,0) == 1);
 8000776:	bf00      	nop
 8000778:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	f003 0301 	and.w	r3, r3, #1
 8000780:	2b01      	cmp	r3, #1
 8000782:	d0f9      	beq.n	8000778 <FPEC_voidFlashPageErase+0x58>

	/* EOP */
	SET_BIT(FPEC->SR,5);
 8000784:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	4a07      	ldr	r2, [pc, #28]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 800078a:	f043 0320 	orr.w	r3, r3, #32
 800078e:	60d3      	str	r3, [r2, #12]
	CLR_BIT(FPEC->CR,1);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000792:	691b      	ldr	r3, [r3, #16]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <FPEC_voidFlashPageErase+0x88>)
 8000796:	f023 0302 	bic.w	r3, r3, #2
 800079a:	6113      	str	r3, [r2, #16]
}
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bc80      	pop	{r7}
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000
 80007ac:	45670123 	.word	0x45670123
 80007b0:	cdef89ab 	.word	0xcdef89ab

080007b4 <FPEC_voidFlashWrite>:

void FPEC_voidFlashWrite(u32 Copy_u32Address, u16* Copy_u16Data, u8 Copy_u8Length)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	4613      	mov	r3, r2
 80007c0:	71fb      	strb	r3, [r7, #7]
	u8 i;
	volatile u16 Temp;

	while (GET_BIT(FPEC->SR,0) == 1);
 80007c2:	bf00      	nop
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 80007c6:	68db      	ldr	r3, [r3, #12]
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d0f9      	beq.n	80007c4 <FPEC_voidFlashWrite+0x10>

	/* Check if FPEC is locked or not */
	if ( /* FPEC_CR->BitAccess.LOCK == 1 */ GET_BIT(FPEC->CR,7) == 1 )
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	09db      	lsrs	r3, r3, #7
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d105      	bne.n	80007ea <FPEC_voidFlashWrite+0x36>
	{
		FPEC -> KEYR = 0x45670123;
 80007de:	4b1f      	ldr	r3, [pc, #124]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 80007e0:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <FPEC_voidFlashWrite+0xac>)
 80007e2:	605a      	str	r2, [r3, #4]
		FPEC -> KEYR = 0xCDEF89AB;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 80007e6:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <FPEC_voidFlashWrite+0xb0>)
 80007e8:	605a      	str	r2, [r3, #4]
	}
	
	
	for (i = 0; i< Copy_u8Length; i++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	75fb      	strb	r3, [r7, #23]
 80007ee:	e02b      	b.n	8000848 <FPEC_voidFlashWrite+0x94>
	{
		/* Write Flash Programming */
		SET_BIT(FPEC->CR,0);
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 80007f2:	691b      	ldr	r3, [r3, #16]
 80007f4:	4a19      	ldr	r2, [pc, #100]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 80007f6:	f043 0301 	orr.w	r3, r3, #1
 80007fa:	6113      	str	r3, [r2, #16]

		/* Half word operation */

		Temp = Copy_u16Data[i];
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	4413      	add	r3, r2
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	82bb      	strh	r3, [r7, #20]
		*((volatile u16*)Copy_u32Address) = Copy_u16Data[i];
 8000808:	7dfb      	ldrb	r3, [r7, #23]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	68ba      	ldr	r2, [r7, #8]
 800080e:	441a      	add	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	8812      	ldrh	r2, [r2, #0]
 8000814:	801a      	strh	r2, [r3, #0]
		Copy_u32Address += 2 ;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	3302      	adds	r3, #2
 800081a:	60fb      	str	r3, [r7, #12]

		/* Wait Busy Flag */
		while (GET_BIT(FPEC->SR,0) == 1);
 800081c:	bf00      	nop
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	2b01      	cmp	r3, #1
 8000828:	d0f9      	beq.n	800081e <FPEC_voidFlashWrite+0x6a>
	
		/* EOP */
		SET_BIT(FPEC->SR,5);
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	4a0b      	ldr	r2, [pc, #44]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	60d3      	str	r3, [r2, #12]
		CLR_BIT(FPEC->CR,0);
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 8000838:	691b      	ldr	r3, [r3, #16]
 800083a:	4a08      	ldr	r2, [pc, #32]	; (800085c <FPEC_voidFlashWrite+0xa8>)
 800083c:	f023 0301 	bic.w	r3, r3, #1
 8000840:	6113      	str	r3, [r2, #16]
	for (i = 0; i< Copy_u8Length; i++)
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	3301      	adds	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	7dfa      	ldrb	r2, [r7, #23]
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	429a      	cmp	r2, r3
 800084e:	d3cf      	bcc.n	80007f0 <FPEC_voidFlashWrite+0x3c>
	}

}
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	371c      	adds	r7, #28
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40022000 	.word	0x40022000
 8000860:	45670123 	.word	0x45670123
 8000864:	cdef89ab 	.word	0xcdef89ab

08000868 <AsciToHex>:

u16 Data[100] = {0};
u32 Address= 0x08000000;

u8 AsciToHex(u8 Copy_u8Asci)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	u8 Result;
	if ( (Copy_u8Asci >= 48) && (Copy_u8Asci <= 57) )
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b2f      	cmp	r3, #47	; 0x2f
 8000876:	d906      	bls.n	8000886 <AsciToHex+0x1e>
 8000878:	79fb      	ldrb	r3, [r7, #7]
 800087a:	2b39      	cmp	r3, #57	; 0x39
 800087c:	d803      	bhi.n	8000886 <AsciToHex+0x1e>
	{
		Result = Copy_u8Asci - 48;
 800087e:	79fb      	ldrb	r3, [r7, #7]
 8000880:	3b30      	subs	r3, #48	; 0x30
 8000882:	73fb      	strb	r3, [r7, #15]
 8000884:	e002      	b.n	800088c <AsciToHex+0x24>
	}

	else
	{
		Result = Copy_u8Asci - 55;
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3b37      	subs	r3, #55	; 0x37
 800088a:	73fb      	strb	r3, [r7, #15]
	}

	return Result;
 800088c:	7bfb      	ldrb	r3, [r7, #15]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <ParseData>:


void ParseData(u8* Copy_u8BufData)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	u8 DigitLow,DigitHigh,CC,i;
	u8 DataDigit0,DataDigit1,DataDigit2,DataDigit3;
	u8 DataCounter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	75bb      	strb	r3, [r7, #22]

	/* Get Character Count */
	DigitHigh = AsciToHex (Copy_u8BufData[1]);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3301      	adds	r3, #1
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffdc 	bl	8000868 <AsciToHex>
 80008b0:	4603      	mov	r3, r0
 80008b2:	757b      	strb	r3, [r7, #21]
	DigitLow  = AsciToHex (Copy_u8BufData[2]);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3302      	adds	r3, #2
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	4618      	mov	r0, r3
 80008bc:	f7ff ffd4 	bl	8000868 <AsciToHex>
 80008c0:	4603      	mov	r3, r0
 80008c2:	753b      	strb	r3, [r7, #20]
	CC        = (DigitHigh<<4) | DigitLow ;
 80008c4:	7d7b      	ldrb	r3, [r7, #21]
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	74fb      	strb	r3, [r7, #19]

	/* Get Address */
	DataDigit0 = AsciToHex (Copy_u8BufData[3]);
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3303      	adds	r3, #3
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff ffc4 	bl	8000868 <AsciToHex>
 80008e0:	4603      	mov	r3, r0
 80008e2:	74bb      	strb	r3, [r7, #18]
	DataDigit1 = AsciToHex (Copy_u8BufData[4]);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3304      	adds	r3, #4
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff ffbc 	bl	8000868 <AsciToHex>
 80008f0:	4603      	mov	r3, r0
 80008f2:	747b      	strb	r3, [r7, #17]
	DataDigit2 = AsciToHex (Copy_u8BufData[5]);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3305      	adds	r3, #5
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f7ff ffb4 	bl	8000868 <AsciToHex>
 8000900:	4603      	mov	r3, r0
 8000902:	743b      	strb	r3, [r7, #16]
	DataDigit3 = AsciToHex (Copy_u8BufData[6]);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3306      	adds	r3, #6
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff ffac 	bl	8000868 <AsciToHex>
 8000910:	4603      	mov	r3, r0
 8000912:	73fb      	strb	r3, [r7, #15]

	/* Clear Low Part of Address */
	Address = Address & 0xFFFF0000;
 8000914:	4b39      	ldr	r3, [pc, #228]	; (80009fc <ParseData+0x164>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	0c1b      	lsrs	r3, r3, #16
 800091a:	041b      	lsls	r3, r3, #16
 800091c:	4a37      	ldr	r2, [pc, #220]	; (80009fc <ParseData+0x164>)
 800091e:	6013      	str	r3, [r2, #0]
	Address = Address | (DataDigit3) | (DataDigit2 << 4) | (DataDigit1 << 8) | (DataDigit0<<12);
 8000920:	7bfa      	ldrb	r2, [r7, #15]
 8000922:	4b36      	ldr	r3, [pc, #216]	; (80009fc <ParseData+0x164>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4313      	orrs	r3, r2
 8000928:	7c3a      	ldrb	r2, [r7, #16]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	4313      	orrs	r3, r2
 800092e:	7c7a      	ldrb	r2, [r7, #17]
 8000930:	0212      	lsls	r2, r2, #8
 8000932:	4313      	orrs	r3, r2
 8000934:	7cba      	ldrb	r2, [r7, #18]
 8000936:	0312      	lsls	r2, r2, #12
 8000938:	4313      	orrs	r3, r2
 800093a:	4a30      	ldr	r2, [pc, #192]	; (80009fc <ParseData+0x164>)
 800093c:	6013      	str	r3, [r2, #0]

	for (i=0;i<CC/2; i++)
 800093e:	2300      	movs	r3, #0
 8000940:	75fb      	strb	r3, [r7, #23]
 8000942:	e047      	b.n	80009d4 <ParseData+0x13c>
	{
		DataDigit0 = AsciToHex (Copy_u8BufData[4*i+9 ]);
 8000944:	7dfb      	ldrb	r3, [r7, #23]
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	3309      	adds	r3, #9
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff89 	bl	8000868 <AsciToHex>
 8000956:	4603      	mov	r3, r0
 8000958:	74bb      	strb	r3, [r7, #18]
		DataDigit1 = AsciToHex (Copy_u8BufData[4*i+10]);
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	330a      	adds	r3, #10
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff7e 	bl	8000868 <AsciToHex>
 800096c:	4603      	mov	r3, r0
 800096e:	747b      	strb	r3, [r7, #17]
		DataDigit2 = AsciToHex (Copy_u8BufData[4*i+11]);
 8000970:	7dfb      	ldrb	r3, [r7, #23]
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	330b      	adds	r3, #11
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	4413      	add	r3, r2
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff73 	bl	8000868 <AsciToHex>
 8000982:	4603      	mov	r3, r0
 8000984:	743b      	strb	r3, [r7, #16]
		DataDigit3 = AsciToHex (Copy_u8BufData[4*i+12]);
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	330c      	adds	r3, #12
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff68 	bl	8000868 <AsciToHex>
 8000998:	4603      	mov	r3, r0
 800099a:	73fb      	strb	r3, [r7, #15]

		Data[DataCounter] = (DataDigit3 << 8) | (DataDigit2 << 12) | (DataDigit1) | (DataDigit0<<4);
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	021b      	lsls	r3, r3, #8
 80009a0:	b21a      	sxth	r2, r3
 80009a2:	7c3b      	ldrb	r3, [r7, #16]
 80009a4:	031b      	lsls	r3, r3, #12
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21a      	sxth	r2, r3
 80009ac:	7c7b      	ldrb	r3, [r7, #17]
 80009ae:	b21b      	sxth	r3, r3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	b21a      	sxth	r2, r3
 80009b4:	7cbb      	ldrb	r3, [r7, #18]
 80009b6:	011b      	lsls	r3, r3, #4
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	7dbb      	ldrb	r3, [r7, #22]
 80009c0:	b291      	uxth	r1, r2
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <ParseData+0x168>)
 80009c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		DataCounter++;
 80009c8:	7dbb      	ldrb	r3, [r7, #22]
 80009ca:	3301      	adds	r3, #1
 80009cc:	75bb      	strb	r3, [r7, #22]
	for (i=0;i<CC/2; i++)
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	3301      	adds	r3, #1
 80009d2:	75fb      	strb	r3, [r7, #23]
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	085b      	lsrs	r3, r3, #1
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	7dfa      	ldrb	r2, [r7, #23]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d3b1      	bcc.n	8000944 <ParseData+0xac>
	}

	FPEC_voidFlashWrite(Address,Data,CC/2);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <ParseData+0x164>)
 80009e2:	6818      	ldr	r0, [r3, #0]
 80009e4:	7cfb      	ldrb	r3, [r7, #19]
 80009e6:	085b      	lsrs	r3, r3, #1
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	4904      	ldr	r1, [pc, #16]	; (8000a00 <ParseData+0x168>)
 80009ee:	f7ff fee1 	bl	80007b4 <FPEC_voidFlashWrite>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	2000000c 	.word	0x2000000c
 8000a00:	20000038 	.word	0x20000038

08000a04 <Parser_voidParseRecord>:


void Parser_voidParseRecord(u8* Copy_u8BufData)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	switch (Copy_u8BufData[8])
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b30      	cmp	r3, #48	; 0x30
 8000a14:	d103      	bne.n	8000a1e <Parser_voidParseRecord+0x1a>
	{
	case '0': ParseData(Copy_u8BufData); break;
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ff3e 	bl	8000898 <ParseData>
 8000a1c:	bf00      	nop
	}
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <MGPIO_voidSetPinDirection>:
#include "../Inc/MCAL/GPIO/GPIO_interface.h"
#include "../Inc/MCAL/GPIO/GPIO_private.h"
#include "../Inc/MCAL/GPIO/GPIO_config.h"

void MGPIO_voidSetPinDirection(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Mode)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	460b      	mov	r3, r1
 8000a34:	71bb      	strb	r3, [r7, #6]
 8000a36:	4613      	mov	r3, r2
 8000a38:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d07a      	beq.n	8000b36 <MGPIO_voidSetPinDirection+0x10e>
 8000a40:	2b02      	cmp	r3, #2
 8000a42:	f300 80b6 	bgt.w	8000bb2 <MGPIO_voidSetPinDirection+0x18a>
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d002      	beq.n	8000a50 <MGPIO_voidSetPinDirection+0x28>
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d03a      	beq.n	8000ac4 <MGPIO_voidSetPinDirection+0x9c>
					break;
	
	
	}

}
 8000a4e:	e0b0      	b.n	8000bb2 <MGPIO_voidSetPinDirection+0x18a>
					if(Copy_u8Pin <=7)
 8000a50:	79bb      	ldrb	r3, [r7, #6]
 8000a52:	2b07      	cmp	r3, #7
 8000a54:	d817      	bhi.n	8000a86 <MGPIO_voidSetPinDirection+0x5e>
						GPIOA_CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 8000a56:	4b59      	ldr	r3, [pc, #356]	; (8000bbc <MGPIO_voidSetPinDirection+0x194>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	79ba      	ldrb	r2, [r7, #6]
 8000a5c:	0092      	lsls	r2, r2, #2
 8000a5e:	210f      	movs	r1, #15
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	43d2      	mvns	r2, r2
 8000a66:	4611      	mov	r1, r2
 8000a68:	4a54      	ldr	r2, [pc, #336]	; (8000bbc <MGPIO_voidSetPinDirection+0x194>)
 8000a6a:	400b      	ands	r3, r1
 8000a6c:	6013      	str	r3, [r2, #0]
						GPIOA_CRL |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000a6e:	4b53      	ldr	r3, [pc, #332]	; (8000bbc <MGPIO_voidSetPinDirection+0x194>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	7979      	ldrb	r1, [r7, #5]
 8000a74:	79ba      	ldrb	r2, [r7, #6]
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a4f      	ldr	r2, [pc, #316]	; (8000bbc <MGPIO_voidSetPinDirection+0x194>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
					break;
 8000a84:	e090      	b.n	8000ba8 <MGPIO_voidSetPinDirection+0x180>
					else if(Copy_u8Pin  <=15)
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	2b0f      	cmp	r3, #15
 8000a8a:	f200 808d 	bhi.w	8000ba8 <MGPIO_voidSetPinDirection+0x180>
						Copy_u8Pin = Copy_u8Pin -8 ;
 8000a8e:	79bb      	ldrb	r3, [r7, #6]
 8000a90:	3b08      	subs	r3, #8
 8000a92:	71bb      	strb	r3, [r7, #6]
						GPIOA_CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 8000a94:	4b4a      	ldr	r3, [pc, #296]	; (8000bc0 <MGPIO_voidSetPinDirection+0x198>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	79ba      	ldrb	r2, [r7, #6]
 8000a9a:	0092      	lsls	r2, r2, #2
 8000a9c:	210f      	movs	r1, #15
 8000a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa2:	43d2      	mvns	r2, r2
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4a46      	ldr	r2, [pc, #280]	; (8000bc0 <MGPIO_voidSetPinDirection+0x198>)
 8000aa8:	400b      	ands	r3, r1
 8000aaa:	6013      	str	r3, [r2, #0]
						GPIOA_CRH |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000aac:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <MGPIO_voidSetPinDirection+0x198>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	7979      	ldrb	r1, [r7, #5]
 8000ab2:	79ba      	ldrb	r2, [r7, #6]
 8000ab4:	0092      	lsls	r2, r2, #2
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	4611      	mov	r1, r2
 8000abc:	4a40      	ldr	r2, [pc, #256]	; (8000bc0 <MGPIO_voidSetPinDirection+0x198>)
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6013      	str	r3, [r2, #0]
					break;
 8000ac2:	e071      	b.n	8000ba8 <MGPIO_voidSetPinDirection+0x180>
					if(Copy_u8Pin <=7)
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	2b07      	cmp	r3, #7
 8000ac8:	d817      	bhi.n	8000afa <MGPIO_voidSetPinDirection+0xd2>
						GPIOB_CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 8000aca:	4b3e      	ldr	r3, [pc, #248]	; (8000bc4 <MGPIO_voidSetPinDirection+0x19c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	79ba      	ldrb	r2, [r7, #6]
 8000ad0:	0092      	lsls	r2, r2, #2
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad8:	43d2      	mvns	r2, r2
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a39      	ldr	r2, [pc, #228]	; (8000bc4 <MGPIO_voidSetPinDirection+0x19c>)
 8000ade:	400b      	ands	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]
						GPIOB_CRL |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000ae2:	4b38      	ldr	r3, [pc, #224]	; (8000bc4 <MGPIO_voidSetPinDirection+0x19c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	7979      	ldrb	r1, [r7, #5]
 8000ae8:	79ba      	ldrb	r2, [r7, #6]
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	fa01 f202 	lsl.w	r2, r1, r2
 8000af0:	4611      	mov	r1, r2
 8000af2:	4a34      	ldr	r2, [pc, #208]	; (8000bc4 <MGPIO_voidSetPinDirection+0x19c>)
 8000af4:	430b      	orrs	r3, r1
 8000af6:	6013      	str	r3, [r2, #0]
					break;
 8000af8:	e058      	b.n	8000bac <MGPIO_voidSetPinDirection+0x184>
					else if(Copy_u8Pin  <=15)
 8000afa:	79bb      	ldrb	r3, [r7, #6]
 8000afc:	2b0f      	cmp	r3, #15
 8000afe:	d855      	bhi.n	8000bac <MGPIO_voidSetPinDirection+0x184>
						Copy_u8Pin = Copy_u8Pin -8 ;
 8000b00:	79bb      	ldrb	r3, [r7, #6]
 8000b02:	3b08      	subs	r3, #8
 8000b04:	71bb      	strb	r3, [r7, #6]
						GPIOB_CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <MGPIO_voidSetPinDirection+0x1a0>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	79ba      	ldrb	r2, [r7, #6]
 8000b0c:	0092      	lsls	r2, r2, #2
 8000b0e:	210f      	movs	r1, #15
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	43d2      	mvns	r2, r2
 8000b16:	4611      	mov	r1, r2
 8000b18:	4a2b      	ldr	r2, [pc, #172]	; (8000bc8 <MGPIO_voidSetPinDirection+0x1a0>)
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	6013      	str	r3, [r2, #0]
						GPIOB_CRH |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	; (8000bc8 <MGPIO_voidSetPinDirection+0x1a0>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	7979      	ldrb	r1, [r7, #5]
 8000b24:	79ba      	ldrb	r2, [r7, #6]
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2c:	4611      	mov	r1, r2
 8000b2e:	4a26      	ldr	r2, [pc, #152]	; (8000bc8 <MGPIO_voidSetPinDirection+0x1a0>)
 8000b30:	430b      	orrs	r3, r1
 8000b32:	6013      	str	r3, [r2, #0]
					break;
 8000b34:	e03a      	b.n	8000bac <MGPIO_voidSetPinDirection+0x184>
					if(Copy_u8Pin <=7)
 8000b36:	79bb      	ldrb	r3, [r7, #6]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	d817      	bhi.n	8000b6c <MGPIO_voidSetPinDirection+0x144>
						GPIOC_CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 8000b3c:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <MGPIO_voidSetPinDirection+0x1a4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	79ba      	ldrb	r2, [r7, #6]
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	210f      	movs	r1, #15
 8000b46:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4a:	43d2      	mvns	r2, r2
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4a1f      	ldr	r2, [pc, #124]	; (8000bcc <MGPIO_voidSetPinDirection+0x1a4>)
 8000b50:	400b      	ands	r3, r1
 8000b52:	6013      	str	r3, [r2, #0]
						GPIOC_CRL |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MGPIO_voidSetPinDirection+0x1a4>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	7979      	ldrb	r1, [r7, #5]
 8000b5a:	79ba      	ldrb	r2, [r7, #6]
 8000b5c:	0092      	lsls	r2, r2, #2
 8000b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b62:	4611      	mov	r1, r2
 8000b64:	4a19      	ldr	r2, [pc, #100]	; (8000bcc <MGPIO_voidSetPinDirection+0x1a4>)
 8000b66:	430b      	orrs	r3, r1
 8000b68:	6013      	str	r3, [r2, #0]
					break;
 8000b6a:	e021      	b.n	8000bb0 <MGPIO_voidSetPinDirection+0x188>
					else if(Copy_u8Pin  <=15)
 8000b6c:	79bb      	ldrb	r3, [r7, #6]
 8000b6e:	2b0f      	cmp	r3, #15
 8000b70:	d81e      	bhi.n	8000bb0 <MGPIO_voidSetPinDirection+0x188>
						Copy_u8Pin = Copy_u8Pin -8 ;
 8000b72:	79bb      	ldrb	r3, [r7, #6]
 8000b74:	3b08      	subs	r3, #8
 8000b76:	71bb      	strb	r3, [r7, #6]
						GPIOC_CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 8000b78:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <MGPIO_voidSetPinDirection+0x1a8>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	79ba      	ldrb	r2, [r7, #6]
 8000b7e:	0092      	lsls	r2, r2, #2
 8000b80:	210f      	movs	r1, #15
 8000b82:	fa01 f202 	lsl.w	r2, r1, r2
 8000b86:	43d2      	mvns	r2, r2
 8000b88:	4611      	mov	r1, r2
 8000b8a:	4a11      	ldr	r2, [pc, #68]	; (8000bd0 <MGPIO_voidSetPinDirection+0x1a8>)
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	6013      	str	r3, [r2, #0]
						GPIOC_CRH |=  ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8000b90:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MGPIO_voidSetPinDirection+0x1a8>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	7979      	ldrb	r1, [r7, #5]
 8000b96:	79ba      	ldrb	r2, [r7, #6]
 8000b98:	0092      	lsls	r2, r2, #2
 8000b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9e:	4611      	mov	r1, r2
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	; (8000bd0 <MGPIO_voidSetPinDirection+0x1a8>)
 8000ba2:	430b      	orrs	r3, r1
 8000ba4:	6013      	str	r3, [r2, #0]
					break;
 8000ba6:	e003      	b.n	8000bb0 <MGPIO_voidSetPinDirection+0x188>
					break;
 8000ba8:	bf00      	nop
 8000baa:	e002      	b.n	8000bb2 <MGPIO_voidSetPinDirection+0x18a>
					break;
 8000bac:	bf00      	nop
 8000bae:	e000      	b.n	8000bb2 <MGPIO_voidSetPinDirection+0x18a>
					break;
 8000bb0:	bf00      	nop
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	40010804 	.word	0x40010804
 8000bc4:	40010c00 	.word	0x40010c00
 8000bc8:	40010c04 	.word	0x40010c04
 8000bcc:	40011000 	.word	0x40011000
 8000bd0:	40011004 	.word	0x40011004

08000bd4 <MGPIO_voidSetPinValue>:

void MGPIO_voidSetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Value)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	71fb      	strb	r3, [r7, #7]
 8000bde:	460b      	mov	r3, r1
 8000be0:	71bb      	strb	r3, [r7, #6]
 8000be2:	4613      	mov	r3, r2
 8000be4:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8Port)
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d040      	beq.n	8000c6e <MGPIO_voidSetPinValue+0x9a>
 8000bec:	2b02      	cmp	r3, #2
 8000bee:	dc60      	bgt.n	8000cb2 <MGPIO_voidSetPinValue+0xde>
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d002      	beq.n	8000bfa <MGPIO_voidSetPinValue+0x26>
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d01d      	beq.n	8000c34 <MGPIO_voidSetPinValue+0x60>

		//default		braek;
	}
	

}
 8000bf8:	e05b      	b.n	8000cb2 <MGPIO_voidSetPinValue+0xde>
					if(Copy_u8Value == GPIO_HIGH)
 8000bfa:	797b      	ldrb	r3, [r7, #5]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10a      	bne.n	8000c16 <MGPIO_voidSetPinValue+0x42>
						SET_BIT(GPIOA_ODR,Copy_u8Pin);
 8000c00:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <MGPIO_voidSetPinValue+0xe8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	79ba      	ldrb	r2, [r7, #6]
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	4a2b      	ldr	r2, [pc, #172]	; (8000cbc <MGPIO_voidSetPinValue+0xe8>)
 8000c10:	430b      	orrs	r3, r1
 8000c12:	6013      	str	r3, [r2, #0]
					break;
 8000c14:	e048      	b.n	8000ca8 <MGPIO_voidSetPinValue+0xd4>
					else if(Copy_u8Value == GPIO_LOW)
 8000c16:	797b      	ldrb	r3, [r7, #5]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d145      	bne.n	8000ca8 <MGPIO_voidSetPinValue+0xd4>
						CLR_BIT(GPIOA_ODR,Copy_u8Pin);
 8000c1c:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MGPIO_voidSetPinValue+0xe8>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	79ba      	ldrb	r2, [r7, #6]
 8000c22:	2101      	movs	r1, #1
 8000c24:	fa01 f202 	lsl.w	r2, r1, r2
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	4611      	mov	r1, r2
 8000c2c:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <MGPIO_voidSetPinValue+0xe8>)
 8000c2e:	400b      	ands	r3, r1
 8000c30:	6013      	str	r3, [r2, #0]
					break;
 8000c32:	e039      	b.n	8000ca8 <MGPIO_voidSetPinValue+0xd4>
					if(Copy_u8Value == GPIO_HIGH)
 8000c34:	797b      	ldrb	r3, [r7, #5]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10a      	bne.n	8000c50 <MGPIO_voidSetPinValue+0x7c>
						SET_BIT(GPIOB_ODR,Copy_u8Pin);
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MGPIO_voidSetPinValue+0xec>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	79ba      	ldrb	r2, [r7, #6]
 8000c40:	2101      	movs	r1, #1
 8000c42:	fa01 f202 	lsl.w	r2, r1, r2
 8000c46:	4611      	mov	r1, r2
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <MGPIO_voidSetPinValue+0xec>)
 8000c4a:	430b      	orrs	r3, r1
 8000c4c:	6013      	str	r3, [r2, #0]
					break;
 8000c4e:	e02d      	b.n	8000cac <MGPIO_voidSetPinValue+0xd8>
					else if(Copy_u8Value == GPIO_LOW)
 8000c50:	797b      	ldrb	r3, [r7, #5]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d12a      	bne.n	8000cac <MGPIO_voidSetPinValue+0xd8>
						CLR_BIT(GPIOB_ODR,Copy_u8Pin);
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MGPIO_voidSetPinValue+0xec>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	79ba      	ldrb	r2, [r7, #6]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c62:	43d2      	mvns	r2, r2
 8000c64:	4611      	mov	r1, r2
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <MGPIO_voidSetPinValue+0xec>)
 8000c68:	400b      	ands	r3, r1
 8000c6a:	6013      	str	r3, [r2, #0]
					break;
 8000c6c:	e01e      	b.n	8000cac <MGPIO_voidSetPinValue+0xd8>
					if(Copy_u8Value == GPIO_HIGH)
 8000c6e:	797b      	ldrb	r3, [r7, #5]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d10a      	bne.n	8000c8a <MGPIO_voidSetPinValue+0xb6>
						SET_BIT(GPIOC_ODR,Copy_u8Pin);
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MGPIO_voidSetPinValue+0xf0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	79ba      	ldrb	r2, [r7, #6]
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c80:	4611      	mov	r1, r2
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <MGPIO_voidSetPinValue+0xf0>)
 8000c84:	430b      	orrs	r3, r1
 8000c86:	6013      	str	r3, [r2, #0]
					break;
 8000c88:	e012      	b.n	8000cb0 <MGPIO_voidSetPinValue+0xdc>
					else if(Copy_u8Value == GPIO_LOW)
 8000c8a:	797b      	ldrb	r3, [r7, #5]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10f      	bne.n	8000cb0 <MGPIO_voidSetPinValue+0xdc>
						CLR_BIT(GPIOC_ODR,Copy_u8Pin);
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MGPIO_voidSetPinValue+0xf0>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	79ba      	ldrb	r2, [r7, #6]
 8000c96:	2101      	movs	r1, #1
 8000c98:	fa01 f202 	lsl.w	r2, r1, r2
 8000c9c:	43d2      	mvns	r2, r2
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <MGPIO_voidSetPinValue+0xf0>)
 8000ca2:	400b      	ands	r3, r1
 8000ca4:	6013      	str	r3, [r2, #0]
					break;
 8000ca6:	e003      	b.n	8000cb0 <MGPIO_voidSetPinValue+0xdc>
					break;
 8000ca8:	bf00      	nop
 8000caa:	e002      	b.n	8000cb2 <MGPIO_voidSetPinValue+0xde>
					break;
 8000cac:	bf00      	nop
 8000cae:	e000      	b.n	8000cb2 <MGPIO_voidSetPinValue+0xde>
					break;
 8000cb0:	bf00      	nop
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	4001080c 	.word	0x4001080c
 8000cc0:	40010c0c 	.word	0x40010c0c
 8000cc4:	4001100c 	.word	0x4001100c

08000cc8 <MGPIO_u8GetPinValue>:
u8   MGPIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	460a      	mov	r2, r1
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	71bb      	strb	r3, [r7, #6]
	u8 LOC_u8Result = 0 ;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	73fb      	strb	r3, [r7, #15]

	switch(Copy_u8Port)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d01a      	beq.n	8000d18 <MGPIO_u8GetPinValue+0x50>
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	dc22      	bgt.n	8000d2c <MGPIO_u8GetPinValue+0x64>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d002      	beq.n	8000cf0 <MGPIO_u8GetPinValue+0x28>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d00a      	beq.n	8000d04 <MGPIO_u8GetPinValue+0x3c>
 8000cee:	e01d      	b.n	8000d2c <MGPIO_u8GetPinValue+0x64>
	{
		case GPIOA	:
				LOC_u8Result = GET_BIT(GPIOA_IDR,Copy_u8Pin);
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <MGPIO_u8GetPinValue+0x70>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	79bb      	ldrb	r3, [r7, #6]
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	73fb      	strb	r3, [r7, #15]
				break;
 8000d02:	e013      	b.n	8000d2c <MGPIO_u8GetPinValue+0x64>
					 
		case GPIOB	:
				LOC_u8Result = GET_BIT(GPIOB_IDR,Copy_u8Pin);
 8000d04:	4b0d      	ldr	r3, [pc, #52]	; (8000d3c <MGPIO_u8GetPinValue+0x74>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	79bb      	ldrb	r3, [r7, #6]
 8000d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
		    	break;
 8000d16:	e009      	b.n	8000d2c <MGPIO_u8GetPinValue+0x64>
					 
		case GPIOC	:
				LOC_u8Result = GET_BIT(GPIOC_IDR,Copy_u8Pin);
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <MGPIO_u8GetPinValue+0x78>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	79bb      	ldrb	r3, [r7, #6]
 8000d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	f003 0301 	and.w	r3, r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
		    	break;
 8000d2a:	bf00      	nop
	}

	return LOC_u8Result ;
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	40010808 	.word	0x40010808
 8000d3c:	40010c08 	.word	0x40010c08
 8000d40:	40011008 	.word	0x40011008

08000d44 <RCC_voidInitSysClock>:
#include  "../Inc/MCAL/RCC/RCC_interface.h"
#include  "../Inc/MCAL/RCC/RCC_private.h"
#include  "../Inc/MCAL/RCC/RCC_config.h"

void RCC_voidInitSysClock(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
		RCC_CFGR  = 0x00000001;
	#elif  	 RCC_CLOCK_TYPE  ==  RCC_HSE_RC
		RCC_CR    = 0x00050000;
		RCC_CFGR  = 0x00000001;
	#elif    RCC_CLOCK_TYPE  ==  RCC_HSI
		RCC_CR    = 0x00000081; /*Enable HSI +triming=0 16 internal default */
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <RCC_voidInitSysClock+0x18>)
 8000d4a:	2281      	movs	r2, #129	; 0x81
 8000d4c:	601a      	str	r2, [r3, #0]
		RCC_CFGR  = 0x00000000;
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <RCC_voidInitSysClock+0x1c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
		#endif
	#else
		#error ("you choosed rong clock type")
	#endif

}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40021004 	.word	0x40021004

08000d64 <RCC_voidEnableClock>:

void RCC_voidEnableClock(u8 Copy_u8BusId,u8 Copy_u8PerId)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	460a      	mov	r2, r1
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	4613      	mov	r3, r2
 8000d72:	71bb      	strb	r3, [r7, #6]
	if (Copy_u8PerId <= 31)
 8000d74:	79bb      	ldrb	r3, [r7, #6]
 8000d76:	2b1f      	cmp	r3, #31
 8000d78:	d82b      	bhi.n	8000dd2 <RCC_voidEnableClock+0x6e>
	{
		switch(Copy_u8BusId)
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d01c      	beq.n	8000dba <RCC_voidEnableClock+0x56>
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	dc25      	bgt.n	8000dd0 <RCC_voidEnableClock+0x6c>
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <RCC_voidEnableClock+0x2a>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d00b      	beq.n	8000da4 <RCC_voidEnableClock+0x40>
		{
			case RCC_AHB   :  SET_BIT(RCC_AHBENR ,Copy_u8PerId);	break;
			case RCC_APB1  :  SET_BIT(RCC_APB1ENR,Copy_u8PerId);	break;
			case RCC_APB2  :  SET_BIT(RCC_APB2ENR,Copy_u8PerId);	break;
			default        : /*Return Error */   		break;
 8000d8c:	e020      	b.n	8000dd0 <RCC_voidEnableClock+0x6c>
			case RCC_AHB   :  SET_BIT(RCC_AHBENR ,Copy_u8PerId);	break;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <RCC_voidEnableClock+0x78>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	79ba      	ldrb	r2, [r7, #6]
 8000d94:	2101      	movs	r1, #1
 8000d96:	fa01 f202 	lsl.w	r2, r1, r2
 8000d9a:	4611      	mov	r1, r2
 8000d9c:	4a0f      	ldr	r2, [pc, #60]	; (8000ddc <RCC_voidEnableClock+0x78>)
 8000d9e:	430b      	orrs	r3, r1
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e016      	b.n	8000dd2 <RCC_voidEnableClock+0x6e>
			case RCC_APB1  :  SET_BIT(RCC_APB1ENR,Copy_u8PerId);	break;
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <RCC_voidEnableClock+0x7c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	79ba      	ldrb	r2, [r7, #6]
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	4611      	mov	r1, r2
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <RCC_voidEnableClock+0x7c>)
 8000db4:	430b      	orrs	r3, r1
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e00b      	b.n	8000dd2 <RCC_voidEnableClock+0x6e>
			case RCC_APB2  :  SET_BIT(RCC_APB2ENR,Copy_u8PerId);	break;
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <RCC_voidEnableClock+0x80>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	79ba      	ldrb	r2, [r7, #6]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <RCC_voidEnableClock+0x80>)
 8000dca:	430b      	orrs	r3, r1
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e000      	b.n	8000dd2 <RCC_voidEnableClock+0x6e>
			default        : /*Return Error */   		break;
 8000dd0:	bf00      	nop
    else
    {
		/* Return Error */
    }

}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	40021014 	.word	0x40021014
 8000de0:	4002101c 	.word	0x4002101c
 8000de4:	40021018 	.word	0x40021018

08000de8 <MSPI1_voidInit>:
#include "../Inc/MCAL/SPI/SPI_private.h"

void (*CallBack)(u8);

void MSPI1_voidInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	MSPI1->CR1 = 0x0347;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <MSPI1_voidInit+0x14>)
 8000dee:	f240 3247 	movw	r2, #839	; 0x347
 8000df2:	601a      	str	r2, [r3, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40013000 	.word	0x40013000

08000e00 <MSPI1_voidSendReceiveSynch>:

void MSPI1_voidSendReceiveSynch(u8 Copy_u8DataToTransmit, u8 *Copy_DataToReceive)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	71fb      	strb	r3, [r7, #7]
	/* Clear For Slave Select Pin */
	MGPIO_voidSetPinValue(MSPI1_SLAVE_PIN,GPIO_LOW);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2100      	movs	r1, #0
 8000e10:	2000      	movs	r0, #0
 8000e12:	f7ff fedf 	bl	8000bd4 <MGPIO_voidSetPinValue>
	
	/* Send Data */
	MSPI1 -> DR = Copy_u8DataToTransmit;
 8000e16:	4a0c      	ldr	r2, [pc, #48]	; (8000e48 <MSPI1_voidSendReceiveSynch+0x48>)
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	60d3      	str	r3, [r2, #12]
	
	/* Wait Busy Flag to finish */
	while (GET_BIT(MSPI1 -> SR, 7) == 1);
 8000e1c:	bf00      	nop
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <MSPI1_voidSendReceiveSynch+0x48>)
 8000e20:	689b      	ldr	r3, [r3, #8]
 8000e22:	09db      	lsrs	r3, r3, #7
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d0f8      	beq.n	8000e1e <MSPI1_voidSendReceiveSynch+0x1e>

 	/* Return to the received data */
	*Copy_DataToReceive = MSPI1 -> DR;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MSPI1_voidSendReceiveSynch+0x48>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	701a      	strb	r2, [r3, #0]
	
	/* Set Salve Select Pin */
	MGPIO_voidSetPinValue(MSPI1_SLAVE_PIN,GPIO_HIGH);
 8000e36:	2201      	movs	r2, #1
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f7ff feca 	bl	8000bd4 <MGPIO_voidSetPinValue>
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40013000 	.word	0x40013000

08000e4c <MSTK_voidInit>:

/* Define Variable for interval mode */
static u8 MSTK_u8ModeOfInterval;

void MSTK_voidInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
#if MSTK_CLK_SRC == MSTK_SRC_AHB
    /* Disable STK - Disable STK Interrupt - Set clock source AHB */
	MSTK -> CTRL = 0x00000004;
 8000e50:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <MSTK_voidInit+0x14>)
 8000e52:	2204      	movs	r2, #4
 8000e54:	601a      	str	r2, [r3, #0]
#else
    /* Disable STK - Disable STK Interrupt - Set clock source AHB/8 */
	MSTK -> CTRL = 0;
	
#endif
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e010 	.word	0xe000e010

08000e64 <MSTK_voidSetBusyWait>:

void MSTK_voidSetBusyWait( u32 Copy_u32Ticks )
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8000e6c:	4a10      	ldr	r2, [pc, #64]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6053      	str	r3, [r2, #4]
	
	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6013      	str	r3, [r2, #0]
	
	/* Wait till flag is raised */
	while( (GET_BIT(MSTK->CTRL,16)) == 0);
 8000e7e:	bf00      	nop
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f9      	beq.n	8000e80 <MSTK_voidSetBusyWait+0x1c>
	
	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000e8c:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <MSTK_voidSetBusyWait+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <MSTK_voidSetIntervalSec>:
void MSTK_voidSetIntervalSec(u8 sec ,void (*Copy_ptr)(void))
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
	/* Disable Timer */
	CLR_BIT(MSTK->CTRL,0);
 8000ec0:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000ec6:	f023 0301 	bic.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]
	MSTK -> VAL = 0;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
	if(sec<16)
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d805      	bhi.n	8000ee4 <MSTK_voidSetIntervalSec+0x30>
	{
		/* Load ticks to load register */
		MSTK -> LOAD = sec*1000000;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4a14      	ldr	r2, [pc, #80]	; (8000f2c <MSTK_voidSetIntervalSec+0x78>)
 8000edc:	fb03 f202 	mul.w	r2, r3, r2
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000ee2:	605a      	str	r2, [r3, #4]
	}
	if(sec>16)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b10      	cmp	r3, #16
 8000ee8:	d907      	bls.n	8000efa <MSTK_voidSetIntervalSec+0x46>
	{
		/* Load ticks to load register */
		MSTK -> LOAD = 15*1000000;
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <MSTK_voidSetIntervalSec+0x7c>)
 8000eee:	605a      	str	r2, [r3, #4]
		remaining_sec = sec-15;
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	3b0f      	subs	r3, #15
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MSTK_voidSetIntervalSec+0x80>)
 8000ef8:	701a      	strb	r2, [r3, #0]
	}
	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6013      	str	r3, [r2, #0]
	/* Save CallBack */
	MSTK_CallBack = Copy_ptr;
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <MSTK_voidSetIntervalSec+0x84>)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	6013      	str	r3, [r2, #0]
	/* Set Mode to Single */
	MSTK_u8ModeOfInterval = MSTK_SINGLE_INTERVAL;
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <MSTK_voidSetIntervalSec+0x88>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
	/* Enable STK Interrupt */
	SET_BIT(MSTK->CTRL, 1);
 8000f12:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <MSTK_voidSetIntervalSec+0x74>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6013      	str	r3, [r2, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	e000e010 	.word	0xe000e010
 8000f2c:	000f4240 	.word	0x000f4240
 8000f30:	00e4e1c0 	.word	0x00e4e1c0
 8000f34:	20000100 	.word	0x20000100
 8000f38:	20000104 	.word	0x20000104
 8000f3c:	20000108 	.word	0x20000108

08000f40 <MSTK_voidSetIntervalSingle>:
void MSTK_voidSetIntervalSingle  ( u32 Copy_u32Ticks, void (*Copy_ptr)(void) )
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	6039      	str	r1, [r7, #0]
	/* Disable Timer */
	CLR_BIT(MSTK->CTRL,0);
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	6013      	str	r3, [r2, #0]
	MSTK -> VAL = 0;
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
	/* Load ticks to load register */
	MSTK -> LOAD = Copy_u32Ticks;
 8000f5c:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6053      	str	r3, [r2, #4]
	/* Start Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6013      	str	r3, [r2, #0]
	/* Save CallBack */
	MSTK_CallBack = Copy_ptr;
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <MSTK_voidSetIntervalSingle+0x54>)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	6013      	str	r3, [r2, #0]
	/* Set Mode to Single */
	MSTK_u8ModeOfInterval = MSTK_SINGLE_INTERVAL;
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MSTK_voidSetIntervalSingle+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	/* Enable STK Interrupt */
	SET_BIT(MSTK->CTRL, 1);
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <MSTK_voidSetIntervalSingle+0x50>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	6013      	str	r3, [r2, #0]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	e000e010 	.word	0xe000e010
 8000f94:	20000104 	.word	0x20000104
 8000f98:	20000108 	.word	0x20000108

08000f9c <MSTK_voidStopInterval>:
	/* Enable STK Interrupt */
	SET_BIT(MSTK->CTRL, 1);
}

void MSTK_voidStopInterval(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
	/* Disable STK Interrupt */
	CLR_BIT(MSTK->CTRL, 1);
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MSTK_voidStopInterval+0x30>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <MSTK_voidStopInterval+0x30>)
 8000fa6:	f023 0302 	bic.w	r3, r3, #2
 8000faa:	6013      	str	r3, [r2, #0]
	
	/* Stop Timer */
	SET_BIT(MSTK->CTRL, 0);
 8000fac:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MSTK_voidStopInterval+0x30>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <MSTK_voidStopInterval+0x30>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6013      	str	r3, [r2, #0]
	MSTK -> LOAD = 0;
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <MSTK_voidStopInterval+0x30>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
	MSTK -> VAL  = 0;
 8000fbe:	4b03      	ldr	r3, [pc, #12]	; (8000fcc <MSTK_voidStopInterval+0x30>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <SysTick_Handler>:
	
	return Local_u32RemainTime;
}

void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
	u8 Local_u8Temporary ;
	
	if (remaining_sec!=0)
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <SysTick_Handler+0xc8>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d034      	beq.n	8001048 <SysTick_Handler+0x78>
	{
		//remaiming_sec=0;
		/* Disable Timer */
		CLR_BIT(MSTK->CTRL,0);
 8000fde:	4b2f      	ldr	r3, [pc, #188]	; (800109c <SysTick_Handler+0xcc>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a2e      	ldr	r2, [pc, #184]	; (800109c <SysTick_Handler+0xcc>)
 8000fe4:	f023 0301 	bic.w	r3, r3, #1
 8000fe8:	6013      	str	r3, [r2, #0]
		MSTK -> VAL = 0;
 8000fea:	4b2c      	ldr	r3, [pc, #176]	; (800109c <SysTick_Handler+0xcc>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
		if(remaining_sec<15)
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <SysTick_Handler+0xc8>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b0e      	cmp	r3, #14
 8000ff6:	d80a      	bhi.n	800100e <SysTick_Handler+0x3e>
		{
			/* Load ticks to load register */
			MSTK -> LOAD = remaining_sec*1000000;
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <SysTick_Handler+0xc8>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <SysTick_Handler+0xd0>)
 8001000:	fb03 f202 	mul.w	r2, r3, r2
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <SysTick_Handler+0xcc>)
 8001006:	605a      	str	r2, [r3, #4]
			remaining_sec=0;
 8001008:	4b23      	ldr	r3, [pc, #140]	; (8001098 <SysTick_Handler+0xc8>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
		}
		if(remaining_sec>15)
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <SysTick_Handler+0xc8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b0f      	cmp	r3, #15
 8001014:	d908      	bls.n	8001028 <SysTick_Handler+0x58>
		{
			/* Load ticks to load register */
			MSTK -> LOAD = 15*1000000;
 8001016:	4b21      	ldr	r3, [pc, #132]	; (800109c <SysTick_Handler+0xcc>)
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <SysTick_Handler+0xd4>)
 800101a:	605a      	str	r2, [r3, #4]
			remaining_sec = remaining_sec-15;
 800101c:	4b1e      	ldr	r3, [pc, #120]	; (8001098 <SysTick_Handler+0xc8>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3b0f      	subs	r3, #15
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <SysTick_Handler+0xc8>)
 8001026:	701a      	strb	r2, [r3, #0]
		}
		/* Start Timer */
		SET_BIT(MSTK->CTRL, 0);
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <SysTick_Handler+0xcc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a1b      	ldr	r2, [pc, #108]	; (800109c <SysTick_Handler+0xcc>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6013      	str	r3, [r2, #0]
		/* Set Mode to Single */
		MSTK_u8ModeOfInterval = MSTK_SINGLE_INTERVAL;
 8001034:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <SysTick_Handler+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		/* Enable STK Interrupt */
		SET_BIT(MSTK->CTRL, 1);
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <SysTick_Handler+0xcc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <SysTick_Handler+0xcc>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	e01c      	b.n	8001082 <SysTick_Handler+0xb2>
	}
	else if ((MSTK_u8ModeOfInterval == MSTK_SINGLE_INTERVAL) && (remaining_sec==0))
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <SysTick_Handler+0xd8>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d118      	bne.n	8001082 <SysTick_Handler+0xb2>
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <SysTick_Handler+0xc8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d114      	bne.n	8001082 <SysTick_Handler+0xb2>
	{
		/* Disable STK Interrupt */
		CLR_BIT(MSTK->CTRL, 1);
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <SysTick_Handler+0xcc>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <SysTick_Handler+0xcc>)
 800105e:	f023 0302 	bic.w	r3, r3, #2
 8001062:	6013      	str	r3, [r2, #0]
	
		/* Stop Timer */
		SET_BIT(MSTK->CTRL, 0);
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <SysTick_Handler+0xcc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0c      	ldr	r2, [pc, #48]	; (800109c <SysTick_Handler+0xcc>)
 800106a:	f043 0301 	orr.w	r3, r3, #1
 800106e:	6013      	str	r3, [r2, #0]
		MSTK -> LOAD = 0;
 8001070:	4b0a      	ldr	r3, [pc, #40]	; (800109c <SysTick_Handler+0xcc>)
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
		MSTK -> VAL  = 0;
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <SysTick_Handler+0xcc>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]

		/* Callback notification */
		MSTK_CallBack();
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <SysTick_Handler+0xdc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4798      	blx	r3
	}

	
	/* Clear interrupt flag */
	Local_u8Temporary = GET_BIT(MSTK->CTRL,16);
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <SysTick_Handler+0xcc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	0c1b      	lsrs	r3, r3, #16
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	71fb      	strb	r3, [r7, #7]
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000100 	.word	0x20000100
 800109c:	e000e010 	.word	0xe000e010
 80010a0:	000f4240 	.word	0x000f4240
 80010a4:	00e4e1c0 	.word	0x00e4e1c0
 80010a8:	20000108 	.word	0x20000108
 80010ac:	20000104 	.word	0x20000104

080010b0 <MUSART1_voidInit>:
#include "../Inc/MCAL/UART/USART_private.h"
#include "../Inc/MCAL/UART/USART_config.h"


void MUSART1_voidInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
	/*	baud rate = 9600		*/
	USART1 -> BRR = 0x341;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010b6:	f240 3241 	movw	r2, #833	; 0x341
 80010ba:	609a      	str	r2, [r3, #8]
	/*Enable Rx */
	SET_BIT((USART1-> CR[0]), 3);			/* Enabling Transmitter */
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	60d3      	str	r3, [r2, #12]
	/*Enable Tx */
	SET_BIT((USART1-> CR[0]), 2);			/* Enabling Receiver */
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	4a08      	ldr	r2, [pc, #32]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	60d3      	str	r3, [r2, #12]
	/*Enable USART1 */
	SET_BIT((USART1-> CR[0]), 13);			/* Enabling USART */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010de:	60d3      	str	r3, [r2, #12]

	/* Clear Status Register */
	USART1 -> SR = 0;				
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <MUSART1_voidInit+0x40>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bc80      	pop	{r7}
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40013800 	.word	0x40013800

080010f4 <MUSART1_voidTransmit>:

void MUSART1_voidTransmit(u8 arr[])
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	u8 i = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
	while(arr[i] != '\0'){
 8001100:	e00f      	b.n	8001122 <MUSART1_voidTransmit+0x2e>
		USART1 -> DR = arr[i];
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	4413      	add	r3, r2
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MUSART1_voidTransmit+0x48>)
 800110c:	605a      	str	r2, [r3, #4]
		while((GET_BIT((USART1 -> SR), 6)) == 0);
 800110e:	bf00      	nop
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MUSART1_voidTransmit+0x48>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0f9      	beq.n	8001110 <MUSART1_voidTransmit+0x1c>
	/* or 	while((USART1 -> SR & 0x40) == 0);  */
		i++;
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	3301      	adds	r3, #1
 8001120:	73fb      	strb	r3, [r7, #15]
	while(arr[i] != '\0'){
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	4413      	add	r3, r2
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1e9      	bne.n	8001102 <MUSART1_voidTransmit+0xe>
	}
	
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40013800 	.word	0x40013800

08001140 <MUSART1_u8Receive>:

u8 MUSART1_u8Receive(u8 * receive_date)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	u8 Local_u8Result = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]

	if ( (GET_BIT((USART1 -> SR), 5)) == 1 )
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <MUSART1_u8Receive+0x38>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	095b      	lsrs	r3, r3, #5
 8001152:	f003 0301 	and.w	r3, r3, #1
 8001156:	2b01      	cmp	r3, #1
 8001158:	d105      	bne.n	8001166 <MUSART1_u8Receive+0x26>
	{
		*receive_date = USART1 -> DR;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <MUSART1_u8Receive+0x38>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	b2da      	uxtb	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e001      	b.n	800116a <MUSART1_u8Receive+0x2a>
	}
	else
	{
		Local_u8Result = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	73fb      	strb	r3, [r7, #15]
	}

	return (Local_u8Result);
 800116a:	7bfb      	ldrb	r3, [r7, #15]
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40013800 	.word	0x40013800

0800117c <main>:
adress_to_loc_t address_of_selective_app =0;

#define SCB_VTOR   *((volatile u32*)0xE000ED08)

void main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af04      	add	r7, sp, #16

	RCC_voidInitSysClock();	/*enable HSI clock*/
 8001182:	f7ff fddf 	bl	8000d44 <RCC_voidInitSysClock>
	RCC_voidEnableClock(RCC_APB2 , 2);	/*enable GPIO A*/
 8001186:	2102      	movs	r1, #2
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff fdeb 	bl	8000d64 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 3);	/*enable GPIO B*/
 800118e:	2103      	movs	r1, #3
 8001190:	2002      	movs	r0, #2
 8001192:	f7ff fde7 	bl	8000d64 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_APB2 , 12); /* SPI Enable Clock */
 8001196:	210c      	movs	r1, #12
 8001198:	2002      	movs	r0, #2
 800119a:	f7ff fde3 	bl	8000d64 <RCC_voidEnableClock>

	/*enable the uart and FPEC prephieral clock*/
	RCC_voidEnableClock(RCC_APB2,14); /* USART1 */
 800119e:	210e      	movs	r1, #14
 80011a0:	2002      	movs	r0, #2
 80011a2:	f7ff fddf 	bl	8000d64 <RCC_voidEnableClock>
	RCC_voidEnableClock(RCC_AHB,4);   /* FPEC   */
 80011a6:	2104      	movs	r1, #4
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fddb 	bl	8000d64 <RCC_voidEnableClock>

	/*TFT Screen pin configuration */
	MGPIO_voidSetPinDirection(GPIOA,PIN1 ,OUTPUT_SPEED_2MHZ_PP); 	   //A0
 80011ae:	2202      	movs	r2, #2
 80011b0:	2101      	movs	r1, #1
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fc38 	bl	8000a28 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA,PIN2 ,OUTPUT_SPEED_2MHZ_PP);	  //RST
 80011b8:	2202      	movs	r2, #2
 80011ba:	2102      	movs	r1, #2
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fc33 	bl	8000a28 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA,PIN5 ,OUTPUT_SPEED_10MHZ_AFPP);	  //CLK
 80011c2:	2209      	movs	r2, #9
 80011c4:	2105      	movs	r1, #5
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff fc2e 	bl	8000a28 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA,PIN7 ,OUTPUT_SPEED_10MHZ_AFPP);	  //MOSI
 80011cc:	2209      	movs	r2, #9
 80011ce:	2107      	movs	r1, #7
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff fc29 	bl	8000a28 <MGPIO_voidSetPinDirection>

	/*USART pin configuration*/
	MGPIO_voidSetPinDirection(GPIOA,9,0b1010);   /* TX AFPP */
 80011d6:	220a      	movs	r2, #10
 80011d8:	2109      	movs	r1, #9
 80011da:	2000      	movs	r0, #0
 80011dc:	f7ff fc24 	bl	8000a28 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinDirection(GPIOA,10,INPUT_FLOAT);  /* Rx Input Floating */
 80011e0:	2204      	movs	r2, #4
 80011e2:	210a      	movs	r1, #10
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fc1f 	bl	8000a28 <MGPIO_voidSetPinDirection>

	/*Cnfiguar uart tx and rx pins */
	MGPIO_voidSetPinDirection(GPIOB,4,INPUT_PULL_UP_DOWEN);  /* Rx Input pullup */
 80011ea:	2208      	movs	r2, #8
 80011ec:	2104      	movs	r1, #4
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fc1a 	bl	8000a28 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinValue(GPIOB,4,PULLUP_SELECT);
 80011f4:	2201      	movs	r2, #1
 80011f6:	2104      	movs	r1, #4
 80011f8:	2001      	movs	r0, #1
 80011fa:	f7ff fceb 	bl	8000bd4 <MGPIO_voidSetPinValue>
	MGPIO_voidSetPinDirection(GPIOB,5,INPUT_PULL_UP_DOWEN);  /* Rx Input pullup */
 80011fe:	2208      	movs	r2, #8
 8001200:	2105      	movs	r1, #5
 8001202:	2001      	movs	r0, #1
 8001204:	f7ff fc10 	bl	8000a28 <MGPIO_voidSetPinDirection>
	MGPIO_voidSetPinValue(GPIOB,5,PULLUP_SELECT);
 8001208:	2201      	movs	r2, #1
 800120a:	2105      	movs	r1, #5
 800120c:	2001      	movs	r0, #1
 800120e:	f7ff fce1 	bl	8000bd4 <MGPIO_voidSetPinValue>
	MUSART1_voidInit();/*baud rate 9600 -enable RX,TX*/
 8001212:	f7ff ff4d 	bl	80010b0 <MUSART1_voidInit>

	/* Init STK */
	MSTK_voidInit();
 8001216:	f7ff fe19 	bl	8000e4c <MSTK_voidInit>

	/* SPI Init */
	MSPI1_voidInit();
 800121a:	f7ff fde5 	bl	8000de8 <MSPI1_voidInit>
	
	/* TFT Init */
	HTFT_voidInitialize();
 800121e:	f7fe ffa7 	bl	8000170 <HTFT_voidInitialize>
	ST7735_SetRotation(0);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff f9c0 	bl	80005a8 <ST7735_SetRotation>
	HTFT_voidFillColor(BLACK);
 8001228:	2000      	movs	r0, #0
 800122a:	f7fe ffe1 	bl	80001f0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff f9ba 	bl	80005a8 <ST7735_SetRotation>
	ST7735_WriteString(0,5, "  Boot Loader ", Font_11x18, RED , BLACK);
 8001234:	4b34      	ldr	r3, [pc, #208]	; (8001308 <main+0x18c>)
 8001236:	2200      	movs	r2, #0
 8001238:	9202      	str	r2, [sp, #8]
 800123a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800123e:	9201      	str	r2, [sp, #4]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	9200      	str	r2, [sp, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a31      	ldr	r2, [pc, #196]	; (800130c <main+0x190>)
 8001248:	2105      	movs	r1, #5
 800124a:	2000      	movs	r0, #0
 800124c:	f7ff f95e 	bl	800050c <ST7735_WriteString>
	ST7735_WriteString(0,40, "wait update..", Font_11x18, MAGENTA , BLACK);
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <main+0x18c>)
 8001252:	2200      	movs	r2, #0
 8001254:	9202      	str	r2, [sp, #8]
 8001256:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800125a:	9201      	str	r2, [sp, #4]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	9200      	str	r2, [sp, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a2b      	ldr	r2, [pc, #172]	; (8001310 <main+0x194>)
 8001264:	2128      	movs	r1, #40	; 0x28
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff f950 	bl	800050c <ST7735_WriteString>
	/*wait for 25 sec for recieving any new updates for one of two application */
	MSTK_voidSetIntervalSec(25,func_select_app);
 800126c:	4929      	ldr	r1, [pc, #164]	; (8001314 <main+0x198>)
 800126e:	2019      	movs	r0, #25
 8001270:	f7ff fe20 	bl	8000eb4 <MSTK_voidSetIntervalSec>

	while(BL_wait_time_flag == 0)
 8001274:	e03e      	b.n	80012f4 <main+0x178>
	{
		receve_state = MUSART1_u8Receive( &(recieving_record[char_count]) );  //recieve at buffer until end of record
 8001276:	4b28      	ldr	r3, [pc, #160]	; (8001318 <main+0x19c>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	461a      	mov	r2, r3
 800127e:	4b27      	ldr	r3, [pc, #156]	; (800131c <main+0x1a0>)
 8001280:	4413      	add	r3, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff5c 	bl	8001140 <MUSART1_u8Receive>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b24      	ldr	r3, [pc, #144]	; (8001320 <main+0x1a4>)
 800128e:	701a      	strb	r2, [r3, #0]
		if (receve_state == 1)
 8001290:	4b23      	ldr	r3, [pc, #140]	; (8001320 <main+0x1a4>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d12d      	bne.n	80012f4 <main+0x178>
		{
			MSTK_voidStopInterval();
 8001298:	f7ff fe80 	bl	8000f9c <MSTK_voidStopInterval>
			if(recieving_record[char_count] == '\n') //end of record
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <main+0x19c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <main+0x1a0>)
 80012a6:	5c9b      	ldrb	r3, [r3, r2]
 80012a8:	2b0a      	cmp	r3, #10
 80012aa:	d118      	bne.n	80012de <main+0x162>
			{
				/*check on the second record that contain the base address of the application you want to update*/
				if (flash_pages_erased == 0 && recieving_record[8]=='0' )
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <main+0x1a8>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <main+0x14e>
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <main+0x1a0>)
 80012b8:	7a1b      	ldrb	r3, [r3, #8]
 80012ba:	2b30      	cmp	r3, #48	; 0x30
 80012bc:	d105      	bne.n	80012ca <main+0x14e>
				{
					FPEC_voidEraseAppArea(recieving_record);
 80012be:	4817      	ldr	r0, [pc, #92]	; (800131c <main+0x1a0>)
 80012c0:	f7ff f9ec 	bl	800069c <FPEC_voidEraseAppArea>
					flash_pages_erased = 1;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <main+0x1a8>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
				}
				/* Parse the recieved record */
				Parser_voidParseRecord(recieving_record);
 80012ca:	4814      	ldr	r0, [pc, #80]	; (800131c <main+0x1a0>)
 80012cc:	f7ff fb9a 	bl	8000a04 <Parser_voidParseRecord>
				MUSART1_voidTransmit("ok");
 80012d0:	4815      	ldr	r0, [pc, #84]	; (8001328 <main+0x1ac>)
 80012d2:	f7ff ff0f 	bl	80010f4 <MUSART1_voidTransmit>
				char_count = 0;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <main+0x19c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e006      	b.n	80012ec <main+0x170>
			}
			else
			{
				char_count ++ ;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <main+0x19c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	3301      	adds	r3, #1
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <main+0x19c>)
 80012ea:	701a      	strb	r2, [r3, #0]
			}
			/*after recieve a record and flashing it set the timer interval again */
			MSTK_voidSetIntervalSingle(12000000,func_select_app);
 80012ec:	4909      	ldr	r1, [pc, #36]	; (8001314 <main+0x198>)
 80012ee:	480f      	ldr	r0, [pc, #60]	; (800132c <main+0x1b0>)
 80012f0:	f7ff fe26 	bl	8000f40 <MSTK_voidSetIntervalSingle>
	while(BL_wait_time_flag == 0)
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <main+0x1b4>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0bb      	beq.n	8001276 <main+0xfa>
		}
		else
		{
		}
	}
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000004 	.word	0x20000004
 800130c:	0800162c 	.word	0x0800162c
 8001310:	0800163c 	.word	0x0800163c
 8001314:	08001399 	.word	0x08001399
 8001318:	20000170 	.word	0x20000170
 800131c:	2000010c 	.word	0x2000010c
 8001320:	20000173 	.word	0x20000173
 8001324:	20000171 	.word	0x20000171
 8001328:	0800164c 	.word	0x0800164c
 800132c:	00b71b00 	.word	0x00b71b00
 8001330:	20000172 	.word	0x20000172

08001334 <get_pressed_button>:

int get_pressed_button(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
	int local_buttonA=1;
 800133a:	2301      	movs	r3, #1
 800133c:	607b      	str	r3, [r7, #4]
	int local_buttonB=1;
 800133e:	2301      	movs	r3, #1
 8001340:	603b      	str	r3, [r7, #0]
	while((local_buttonA && local_buttonB)==1)
 8001342:	e00e      	b.n	8001362 <get_pressed_button+0x2e>
	{
		local_buttonA=MGPIO_u8GetPinValue(GPIOB,buttonA);
 8001344:	2104      	movs	r1, #4
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fcbe 	bl	8000cc8 <MGPIO_u8GetPinValue>
 800134c:	4603      	mov	r3, r0
 800134e:	607b      	str	r3, [r7, #4]
		local_buttonB=MGPIO_u8GetPinValue(GPIOB,buttonB);
 8001350:	2105      	movs	r1, #5
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fcb8 	bl	8000cc8 <MGPIO_u8GetPinValue>
 8001358:	4603      	mov	r3, r0
 800135a:	603b      	str	r3, [r7, #0]
		MSTK_voidSetBusyWait(4000000);
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <get_pressed_button+0x60>)
 800135e:	f7ff fd81 	bl	8000e64 <MSTK_voidSetBusyWait>
	while((local_buttonA && local_buttonB)==1)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d004      	beq.n	8001372 <get_pressed_button+0x3e>
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <get_pressed_button+0x3e>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <get_pressed_button+0x40>
 8001372:	2300      	movs	r3, #0
 8001374:	2b01      	cmp	r3, #1
 8001376:	d0e5      	beq.n	8001344 <get_pressed_button+0x10>
	}
	if(local_buttonA==0)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <get_pressed_button+0x4e>
	{
		return 1;
 800137e:	2301      	movs	r3, #1
 8001380:	e004      	b.n	800138c <get_pressed_button+0x58>
	}
	else if(local_buttonB==0)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <get_pressed_button+0x58>
	{
		return 2;
 8001388:	2302      	movs	r3, #2
 800138a:	e7ff      	b.n	800138c <get_pressed_button+0x58>
	}
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	003d0900 	.word	0x003d0900

08001398 <func_select_app>:

void func_select_app(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af04      	add	r7, sp, #16
	HTFT_voidDrawRect(0,160,25,50,BLACK);
 800139e:	2300      	movs	r3, #0
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2332      	movs	r3, #50	; 0x32
 80013a4:	2219      	movs	r2, #25
 80013a6:	21a0      	movs	r1, #160	; 0xa0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7fe ff64 	bl	8000276 <HTFT_voidDrawRect>
	switch(app_apdated)
 80013ae:	4b61      	ldr	r3, [pc, #388]	; (8001534 <func_select_app+0x19c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d024      	beq.n	8001400 <func_select_app+0x68>
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	dc31      	bgt.n	800141e <func_select_app+0x86>
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <func_select_app+0x2c>
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d00f      	beq.n	80013e2 <func_select_app+0x4a>
 80013c2:	e02c      	b.n	800141e <func_select_app+0x86>
	{
	case 0:
		ST7735_WriteString(0,40, "NO APP UPDATED ", Font_11x18, MAGENTA, BLACK);
 80013c4:	4b5c      	ldr	r3, [pc, #368]	; (8001538 <func_select_app+0x1a0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	9202      	str	r2, [sp, #8]
 80013ca:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80013ce:	9201      	str	r2, [sp, #4]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	9200      	str	r2, [sp, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a59      	ldr	r2, [pc, #356]	; (800153c <func_select_app+0x1a4>)
 80013d8:	2128      	movs	r1, #40	; 0x28
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff f896 	bl	800050c <ST7735_WriteString>
		break;
 80013e0:	e01d      	b.n	800141e <func_select_app+0x86>
	case 1:
		ST7735_WriteString(0,40, "APP 1 UPDATED ", Font_11x18, MAGENTA , BLACK);
 80013e2:	4b55      	ldr	r3, [pc, #340]	; (8001538 <func_select_app+0x1a0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	9202      	str	r2, [sp, #8]
 80013e8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80013ec:	9201      	str	r2, [sp, #4]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	9200      	str	r2, [sp, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a52      	ldr	r2, [pc, #328]	; (8001540 <func_select_app+0x1a8>)
 80013f6:	2128      	movs	r1, #40	; 0x28
 80013f8:	2000      	movs	r0, #0
 80013fa:	f7ff f887 	bl	800050c <ST7735_WriteString>
		break;
 80013fe:	e00e      	b.n	800141e <func_select_app+0x86>
	case 2:
		ST7735_WriteString(0,40, "APP 2 UPDATED ", Font_11x18, MAGENTA , BLACK);
 8001400:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <func_select_app+0x1a0>)
 8001402:	2200      	movs	r2, #0
 8001404:	9202      	str	r2, [sp, #8]
 8001406:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800140a:	9201      	str	r2, [sp, #4]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	9200      	str	r2, [sp, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a4c      	ldr	r2, [pc, #304]	; (8001544 <func_select_app+0x1ac>)
 8001414:	2128      	movs	r1, #40	; 0x28
 8001416:	2000      	movs	r0, #0
 8001418:	f7ff f878 	bl	800050c <ST7735_WriteString>
		break;
 800141c:	bf00      	nop

	}
	MSTK_voidStopInterval();
 800141e:	f7ff fdbd 	bl	8000f9c <MSTK_voidStopInterval>
	MSTK_voidSetBusyWait(4000000);
 8001422:	4849      	ldr	r0, [pc, #292]	; (8001548 <func_select_app+0x1b0>)
 8001424:	f7ff fd1e 	bl	8000e64 <MSTK_voidSetBusyWait>
	MSTK_voidSetBusyWait(4000000);
 8001428:	4847      	ldr	r0, [pc, #284]	; (8001548 <func_select_app+0x1b0>)
 800142a:	f7ff fd1b 	bl	8000e64 <MSTK_voidSetBusyWait>
	MSTK_voidSetBusyWait(4000000);
 800142e:	4846      	ldr	r0, [pc, #280]	; (8001548 <func_select_app+0x1b0>)
 8001430:	f7ff fd18 	bl	8000e64 <MSTK_voidSetBusyWait>
		HTFT_voidDrawRect(0,160,25,50,BLACK);
 8001434:	2300      	movs	r3, #0
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2332      	movs	r3, #50	; 0x32
 800143a:	2219      	movs	r2, #25
 800143c:	21a0      	movs	r1, #160	; 0xa0
 800143e:	2000      	movs	r0, #0
 8001440:	f7fe ff19 	bl	8000276 <HTFT_voidDrawRect>
	ST7735_WriteString(0,25, "Select APP ", Font_11x18, GREEN , BLACK);
 8001444:	4b3c      	ldr	r3, [pc, #240]	; (8001538 <func_select_app+0x1a0>)
 8001446:	2200      	movs	r2, #0
 8001448:	9202      	str	r2, [sp, #8]
 800144a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800144e:	9201      	str	r2, [sp, #4]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	9200      	str	r2, [sp, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a3d      	ldr	r2, [pc, #244]	; (800154c <func_select_app+0x1b4>)
 8001458:	2119      	movs	r1, #25
 800145a:	2000      	movs	r0, #0
 800145c:	f7ff f856 	bl	800050c <ST7735_WriteString>
	ST7735_WriteString(0,50, " 1:APP1       ", Font_11x18,GREEN , BLACK);
 8001460:	4b35      	ldr	r3, [pc, #212]	; (8001538 <func_select_app+0x1a0>)
 8001462:	2200      	movs	r2, #0
 8001464:	9202      	str	r2, [sp, #8]
 8001466:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800146a:	9201      	str	r2, [sp, #4]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	9200      	str	r2, [sp, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a37      	ldr	r2, [pc, #220]	; (8001550 <func_select_app+0x1b8>)
 8001474:	2132      	movs	r1, #50	; 0x32
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff f848 	bl	800050c <ST7735_WriteString>
	ST7735_WriteString(0,75, " 2:APP2       ", Font_11x18,GREEN , BLACK);
 800147c:	4b2e      	ldr	r3, [pc, #184]	; (8001538 <func_select_app+0x1a0>)
 800147e:	2200      	movs	r2, #0
 8001480:	9202      	str	r2, [sp, #8]
 8001482:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001486:	9201      	str	r2, [sp, #4]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	9200      	str	r2, [sp, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a31      	ldr	r2, [pc, #196]	; (8001554 <func_select_app+0x1bc>)
 8001490:	214b      	movs	r1, #75	; 0x4b
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff f83a 	bl	800050c <ST7735_WriteString>
	int app_number=get_pressed_button();
 8001498:	f7ff ff4c 	bl	8001334 <get_pressed_button>
 800149c:	6078      	str	r0, [r7, #4]
	ST7735_SetRotation(0);
 800149e:	2000      	movs	r0, #0
 80014a0:	f7ff f882 	bl	80005a8 <ST7735_SetRotation>
	HTFT_voidFillColor(BLACK);
 80014a4:	2000      	movs	r0, #0
 80014a6:	f7fe fea3 	bl	80001f0 <HTFT_voidFillColor>
	ST7735_SetRotation(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff f87c 	bl	80005a8 <ST7735_SetRotation>
	if(app_number==1)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d11b      	bne.n	80014ee <func_select_app+0x156>
	{
		ST7735_WriteString(0,30, "APP1 will run", Font_11x18,GREEN , BLACK);
 80014b6:	4b20      	ldr	r3, [pc, #128]	; (8001538 <func_select_app+0x1a0>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	9202      	str	r2, [sp, #8]
 80014bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014c0:	9201      	str	r2, [sp, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	9200      	str	r2, [sp, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <func_select_app+0x1c0>)
 80014ca:	211e      	movs	r1, #30
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7ff f81d 	bl	800050c <ST7735_WriteString>
		MSTK_voidSetBusyWait(4000000);
 80014d2:	481d      	ldr	r0, [pc, #116]	; (8001548 <func_select_app+0x1b0>)
 80014d4:	f7ff fcc6 	bl	8000e64 <MSTK_voidSetBusyWait>
		SCB_VTOR = 0x08003C00;
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <func_select_app+0x1c4>)
 80014da:	4a21      	ldr	r2, [pc, #132]	; (8001560 <func_select_app+0x1c8>)
 80014dc:	601a      	str	r2, [r3, #0]
		address_of_selective_app = *((adress_to_loc_t *)0x08003C04);
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <func_select_app+0x1cc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a21      	ldr	r2, [pc, #132]	; (8001568 <func_select_app+0x1d0>)
 80014e4:	6013      	str	r3, [r2, #0]
		address_of_selective_app();
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <func_select_app+0x1d0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4798      	blx	r3
		SCB_VTOR = 0x08008C00;
		address_of_selective_app = *((adress_to_loc_t *)0x08008C04);
		address_of_selective_app();
	}

}
 80014ec:	e01d      	b.n	800152a <func_select_app+0x192>
	else if(app_number==2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d11a      	bne.n	800152a <func_select_app+0x192>
		ST7735_WriteString(0,30, "APP2 will run", Font_11x18,GREEN , BLACK);
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <func_select_app+0x1a0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	9202      	str	r2, [sp, #8]
 80014fa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014fe:	9201      	str	r2, [sp, #4]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a19      	ldr	r2, [pc, #100]	; (800156c <func_select_app+0x1d4>)
 8001508:	211e      	movs	r1, #30
 800150a:	2000      	movs	r0, #0
 800150c:	f7fe fffe 	bl	800050c <ST7735_WriteString>
		MSTK_voidSetBusyWait(4000000);
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <func_select_app+0x1b0>)
 8001512:	f7ff fca7 	bl	8000e64 <MSTK_voidSetBusyWait>
		SCB_VTOR = 0x08008C00;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <func_select_app+0x1c4>)
 8001518:	4a15      	ldr	r2, [pc, #84]	; (8001570 <func_select_app+0x1d8>)
 800151a:	601a      	str	r2, [r3, #0]
		address_of_selective_app = *((adress_to_loc_t *)0x08008C04);
 800151c:	4b15      	ldr	r3, [pc, #84]	; (8001574 <func_select_app+0x1dc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a11      	ldr	r2, [pc, #68]	; (8001568 <func_select_app+0x1d0>)
 8001522:	6013      	str	r3, [r2, #0]
		address_of_selective_app();
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <func_select_app+0x1d0>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4798      	blx	r3
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000034 	.word	0x20000034
 8001538:	20000004 	.word	0x20000004
 800153c:	08001650 	.word	0x08001650
 8001540:	08001660 	.word	0x08001660
 8001544:	08001670 	.word	0x08001670
 8001548:	003d0900 	.word	0x003d0900
 800154c:	08001680 	.word	0x08001680
 8001550:	0800168c 	.word	0x0800168c
 8001554:	0800169c 	.word	0x0800169c
 8001558:	080016ac 	.word	0x080016ac
 800155c:	e000ed08 	.word	0xe000ed08
 8001560:	08003c00 	.word	0x08003c00
 8001564:	08003c04 	.word	0x08003c04
 8001568:	20000174 	.word	0x20000174
 800156c:	080016bc 	.word	0x080016bc
 8001570:	08008c00 	.word	0x08008c00
 8001574:	08008c04 	.word	0x08008c04

08001578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800157c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopForever+0xe>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopForever+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015a6:	f000 f811 	bl	80015cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015aa:	f7ff fde7 	bl	800117c <main>

080015ae <LoopForever>:

LoopForever:
  b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   r0, =_estack
 80015b0:	20003c00 	.word	0x20003c00
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80015bc:	08002430 	.word	0x08002430
  ldr r2, =_sbss
 80015c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015c4:	20000178 	.word	0x20000178

080015c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_2_IRQHandler>
	...

080015cc <__libc_init_array>:
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	2600      	movs	r6, #0
 80015d0:	4d0c      	ldr	r5, [pc, #48]	; (8001604 <__libc_init_array+0x38>)
 80015d2:	4c0d      	ldr	r4, [pc, #52]	; (8001608 <__libc_init_array+0x3c>)
 80015d4:	1b64      	subs	r4, r4, r5
 80015d6:	10a4      	asrs	r4, r4, #2
 80015d8:	42a6      	cmp	r6, r4
 80015da:	d109      	bne.n	80015f0 <__libc_init_array+0x24>
 80015dc:	f000 f81a 	bl	8001614 <_init>
 80015e0:	2600      	movs	r6, #0
 80015e2:	4d0a      	ldr	r5, [pc, #40]	; (800160c <__libc_init_array+0x40>)
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <__libc_init_array+0x44>)
 80015e6:	1b64      	subs	r4, r4, r5
 80015e8:	10a4      	asrs	r4, r4, #2
 80015ea:	42a6      	cmp	r6, r4
 80015ec:	d105      	bne.n	80015fa <__libc_init_array+0x2e>
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f4:	4798      	blx	r3
 80015f6:	3601      	adds	r6, #1
 80015f8:	e7ee      	b.n	80015d8 <__libc_init_array+0xc>
 80015fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80015fe:	4798      	blx	r3
 8001600:	3601      	adds	r6, #1
 8001602:	e7f2      	b.n	80015ea <__libc_init_array+0x1e>
 8001604:	08002428 	.word	0x08002428
 8001608:	08002428 	.word	0x08002428
 800160c:	08002428 	.word	0x08002428
 8001610:	0800242c 	.word	0x0800242c

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
